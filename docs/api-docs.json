{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "KnowNOW",
    "description": "KnowNOW spec for Swagger",
    "termsOfService": "http://swagger.io/terms/"
  },
  "basePath": "/",
  "tags": [{
      "name": "Admin",
      "description": "API for Admin"
    },
    {
      "name": "Patient",
      "description": "API for Patient"
    },
    {
      "name": "Provider",
      "description": "API for Provider"
    }
  ],
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "multipart/form-data"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/v1/updateClinicCode/{clinicCode}": {
      "put": {
        "tags": [
          "Patient"
        ],
        "description": "Update clinic code for patient",
        "operationId": "Update clinic code for patient",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "access_token",
            "in": "header",
            "description": "Access token (Will receive on register api response header)",
            "required": true,
            "type": "string"
          },
          {
            "name": "clinicCode",
            "in": "path",
            "description": "Clinic Code",
            "required": true,
            "type": "string"
          }
          
        ],
        "responses": {
          "200": {
            "description": "Clinic code update successfully",
            "schema": {
              "$ref": "#/definitions/updateClinicCode200"
            }
          },
          "500": {
            "description": "Internal Server error- Cannot update clinic code",
            "schema": {
              "$ref": "#/definitions/updateClinicCode500"
            }
          }
        }
      }
    },    
    "/api/v1/registerPatient": {
      "post": {
        "tags": [
          "Patient"
        ],
        "description": "Patient Registration API",
        "operationId": "Patient Registration API",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "firstName",
            "in": "formData",
            "description": "First Name",
            "required": true,
            "type": "string",
            "default": "Demo"
          },
          {
            "name": "lastName",
            "in": "formData",
            "description": "Last Name",
            "required": true,
            "type": "string",
            "default": "Demo"
          },
          {
            "name": "email",
            "in": "formData",
            "description": "E-mail address",
            "required": true,
            "type": "string",
            "default": "demo@gmail.com"
          },
          {
            "name": "password",
            "in": "formData",
            "description": "Password",
            "required": true,
            "type": "string",
            "default": "123456"
          },
          {
            "name": "confirmPassword",
            "in": "formData",
            "description": "Confirm Password",
            "required": true,
            "type": "string",
            "default": "123456"
          },
          {
            "name": "device_token",
            "in": "header",
            "description": "Device token",
            "required": false,
            "type": "string"
          },
          {
            "name": "device_type",
            "in": "header",
            "description": "Device type",
            "required": false,
            "type": "string"
          },
          {
            "name": "device_id",
            "in": "header",
            "description": "Device id",
            "required": false,
            "type": "string"
          },
          {
            "name": "app_version",
            "in": "header",
            "description": "app version",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Patient created successfully",
            "schema": {
              "$ref": "#/definitions/patient200"
            }
          },
          "400": {
            "description": "Patient Email Already Used",
            "schema": {
              "$ref": "#/definitions/patient400"
            }
          },
          "500": {
            "description": "Internal Server error- Cannot save user",
            "schema": {
              "$ref": "#/definitions/patient500"
            }
          }
        }
      }
    },
    "/api/v1/generateOTP": {
      "post": {
        "tags": [
          "Patient"
        ],
        "description": "Get new OTP",
        "operationId": "Get new OTP",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "countryCode",
            "in": "formData",
            "description": "Phone country code",
            "required": true,
            "type": "string",
            "default": "+1"
          },
          {
            "name": "telephone",
            "in": "formData",
            "description": "Phone number",
            "required": true,
            "type": "string",
            "default": "1212111111"
          },
          {
            "name": "access_token",
            "in": "header",
            "description": "Access token (Will receive on register api response header)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OTP sent to device/OTP Already Verified",
            "schema": {
              "$ref": "#/definitions/getOTP200"
            }
          },
          "409": {
            "description": "Telephone already exists",
            "schema": {
              "$ref": "#/definitions/getOTP409"
            }
          },
          "500": {
            "description": "Internal Server error- Cannot save user",
            "schema": {
              "$ref": "#/definitions/getOTP500"
            }
          }
        }
      }
    },
    "/api/v1/verifyOTP": {
      "post": {
        "tags": [
          "Patient"
        ],
        "description": "Verify phone OTP",
        "operationId": "Verify phone OTP",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "OTP",
            "in": "formData",
            "description": "Phone OTP",
            "required": true,
            "type": "string"
          },
          {
            "name": "access_token",
            "in": "header",
            "description": "Access token (Will receive on register api response header)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OTP  verified/OTP already verified",
            "schema": {
              "$ref": "#/definitions/verifyOTP200"
            }
          },
          "400": {
            "description": "OTP not valid",
            "schema": {
              "$ref": "#/definitions/verifyOTP400"
            }
          },
          "409": {
            "description": "Telephone already used",
            "schema": {
              "$ref": "#/definitions/verifyOTP409"
            }
          },
          "401": {
            "description": "No user found",
            "schema": {
              "$ref": "#/definitions/verifyOTP401"
            }
          },
          "500": {
            "description": "Something Went Wrong",
            "schema": {
              "$ref": "#/definitions/verifyOTP500"
            }
          }
        }
      }
    },
    "/api/v1/forgotPassword": {
      "post": {
        "tags": [
          "Patient"
        ],
        "description": "Forgot Password",
        "operationId": "Forgot Password",
        "produces": [
          "application/json"
        ],
        "parameters": [{
          "name": "email",
          "in": "formData",
          "description": "Email of user",
          "required": true,
          "type": "string",
          "default": "test@gmail.com"
        }],
        "responses": {
          "200": {
            "description": "Verification link sent to email",
            "schema": {
              "$ref": "#/definitions/forgotPassword200"
            }
          },
          "401": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/forgotPassword401"
            }
          },
          "500": {
            "description": "Internal Server error- Cannot save user",
            "schema": {
              "$ref": "#/definitions/forgotPassword500"
            }
          }
        }
      }
    },
    "/api/v1/verifyResetToken/{token}": {
      "get": {
        "tags": [
          "Patient"
        ],
        "description": "Verify reset token",
        "operationId": "Verify reset token",
        "produces": [
          "application/json"
        ],
        "parameters": [{
          "name": "token",
          "in": "path",
          "description": "reset token for reset password",
          "required": true,
          "type": "string",
          "default": ""
        }],
        "responses": {
          "200": {
            "description": "Token Verified",
            "schema": {
              "$ref": "#/definitions/verifyResetToken200"
            }
          },
          "401": {
            "description": "Token Expired",
            "schema": {
              "$ref": "#/definitions/verifyResetToken401"
            }
          },
          "403": {
            "description": "Unothorised",
            "schema": {
              "$ref": "#/definitions/verifyResetToken403"
            }
          },
          "500": {
            "description": "Something Went Wrong",
            "schema": {
              "$ref": "#/definitions/verifyResetToken500"
            }
          }
        }
      }
    },
    "/api/v1/resetPassword/{token}": {
      "post": {
        "tags": [
          "Patient"
        ],
        "description": "Password Updated",
        "operationId": "Password Updated",
        "produces": [
          "application/json"
        ],
        "parameters": [{
          "name": "password",
          "in": "formData",
          "description": "new password",
          "required": true,
          "type": "string",
          "default": "123456"
        }, {
          "name": "token",
          "in": "path",
          "description": "reset token",
          "required": true,
          "type": "string",
          "default": ""
        }, {
          "name": "confirmPassword",
          "in": "formData",
          "description": "confirm password",
          "required": true,
          "type": "string",
          "default": "123456"
        }],
        "responses": {
          "200": {
            "description": "Password Updated",
            "schema": {
              "$ref": "#/definitions/resetPassword200"
            }
          },
          "400": {
            "description": "Reset link expired",
            "schema": {
              "$ref": "#/definitions/resetPassword400"
            }
          },
          "401": {
            "description": "Token Expired",
            "schema": {
              "$ref": "#/definitions/resetPassword401"
            }
          },
          "500": {
            "description": "Something Went Wrong",
            "schema": {
              "$ref": "#/definitions/resetPassword500"
            }
          }
        }
      }
    },
    "/api/v1/saveAllergiesDetails": {
      "put": {
        "tags": [
          "Patient"
        ],
        "description": "Allergies and Hx API",
        "operationId": "Allergies and Hx API",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "medicalCondition",
            "in": "formData",
            "description": "Medical Condition",
            "required": false,
            "type": "string",
            "default": "[\"Test\",\"Test2\",\"Test3\"]"
          },
          {
            "name": "allergies",
            "in": "formData",
            "description": "allergies",
            "required": false,
            "type": "string",
            "default": "{\"medicationAllergies\":[\"1\",\"2\",\"4\",\"4\"],\"otherAllergies\":[\"a\",\"b\",\"a\"]}"
          },
          {
            "name": "medication",
            "in": "formData",
            "description": "Medications",
            "required": false,
            "type": "string",
            "default": "[\"Test\",\"Test2\",\"Test3\"]"
          },
          {
            "name": "access_token",
            "in": "header",
            "description": "access token",
            "required": true,
            "type": "string"
          },
          {
            "name": "appointmentId",
            "in": "formData",
            "description": "Appointment id related to health record",
            "required": false,
            "type": "string"
          },
          {
            "name": "childId",
            "in": "formData",
            "description": "Child id",
            "required": false,
            "type": "number"
          }          
        ],
        "responses": {
          "200": {
            "description": "Allergies and medical added",
            "schema": {
              "$ref": "#/definitions/allergy200"
            }
          },
          "409": {
            "description": "No such user found",
            "schema": {
              "$ref": "#/definitions/allergy409"
            }
          },
          "500": {
            "description": "Internal Server error- Cannot save user",
            "schema": {
              "$ref": "#/definitions/allergy500"
            }
          }
        }
      }
    },
    "/api/v1/getAllergiesAndMedications": {
      "get": {
        "tags": [
          "Patient"
        ],
        "description": "Get Patient Allergies and Medications API",
        "operationId": "Get Patient Allergies and Medications API",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "access_token",
            "in": "header",
            "description": "access token",
            "required": true,
            "type": "string"
          },
          {
            "name": "childId",
            "in": "query",
            "description": "Child id",
            "required": false,
            "type": "number"
          }                    
        ],
        "responses": {
          "200": {
            "description": "Allergies and medication found",
            "schema": {
              "$ref": "#/definitions/getAllergiesAndMedications200"
            }
          },
          "401": {
            "description": "No such user found",
            "schema": {
              "$ref": "#/definitions/getAllergiesAndMedications401"
            }
          },
          "500": {
            "description": "Internal Server error- Cannot save user",
            "schema": {
              "$ref": "#/definitions/getAllergiesAndMedications500"
            }
          }
        }
      }
    },    
    "/api/v1/saveInsuranceDetails": {
      "put": {
        "tags": [
          "Patient"
        ],
        "description": "Add Insurance",
        "operationId": "Add Insurance",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "access_token",
            "in": "header",
            "description": "access token",
            "required": true,
            "type": "string"
          },
          {
            "name": "insuranceCompanyName",
            "in": "formData",
            "description": "Insurance company name",
            "required": true,
            "type": "string",
            "default": "kaiser Foundation Group"
          },
          {
            "name": "policyHolderName",
            "in": "formData",
            "description": "Policy holder name",
            "required": true,
            "type": "string",
            "default": "demo"
          },
          {
            "name": "groupId",
            "in": "formData",
            "description": "Group Id",
            "required": true,
            "type": "string",
            "default": "123456"
          },
          {
            "name": "memberId",
            "in": "formData",
            "description": "Member Id",
            "required": true,
            "type": "string",
            "default": "123456"
          },
          {
            "name": "insuranceNumber",
            "in": "formData",
            "description": "Insurance Number",
            "required": false,
            "type": "string",
            "default": "123456"
          },
          {
            "name": "insuranceEndDate",
            "in": "formData",
            "description": "Insurance end date",
            "required": false,
            "type": "string",
            "default": "123456"
          },
          {
            "name": "insuranceVerifiedBy",
            "in": "formData",
            "description": "insurance Verified By",
            "required": false,
            "type": "integer",
            "default": "1"
          },
          {
            "name": "insuranceVerifiedOn",
            "in": "formData",
            "description": "Insurance Verified On",
            "required": false,
            "type": "string",
            "default": "2018-05-03"
          },
          {
            "name": "fileDescription",
            "in": "formData",
            "description": "File description of uploaded file \n Example: [\"1542451274.jpg\"]",
            "required": false,
            "example": "[\"1542451274.jpg\"]",
            "type": "string"
          },
          {
            "name": "childId",
            "in": "formData",
            "description": "Child id",
            "required": false,
            "type": "number"
          }          
        ],
        "responses": {
          "200": {
            "description": "Insuance added",
            "schema": {
              "$ref": "#/definitions/insurance200"
            }
          },
          "409": {
            "description": "No such user found",
            "schema": {
              "$ref": "#/definitions/insurance409"
            }
          },
          "500": {
            "description": "Internal Server error- Cannot save user",
            "schema": {
              "$ref": "#/definitions/insurance500"
            }
          }
        }
      }
    },
    "/api/v1/savePharmacyAndLab": {
      "put": {
        "tags": [
          "Patient"
        ],
        "description": "Add Pharmacy and Lab",
        "operationId": "Add Pharmacy and Lab",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "pharmacy",
            "in": "formData",
            "description": "Pharmacy Info",
            "required": false,
            "type": "string",
            "default": "{\"pharmacyName\": \"abc\",\"pharmacyAddress\": \"abc\",\"pharmacyPhone\":\"123456789\"}"
          },
          {
            "name": "labs",
            "in": "formData",
            "description": "Lab Info",
            "required": false,
            "type": "string",
            "default": "{\"labName\": \"abc\",\"labAddress\": \"abc\",\"labPhone\":\"1234567890\"}"
          },
          {
            "name": "access_token",
            "in": "header",
            "description": "access token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Pharmacy or labs added",
            "schema": {
              "$ref": "#/definitions/pharmacy200"
            }
          },
          "401": {
            "description": "No such user found",
            "schema": {
              "$ref": "#/definitions/pharmacy401"
            }
          },
          "500": {
            "description": "Internal Server error- Cannot save user",
            "schema": {
              "$ref": "#/definitions/pharmacy500"
            }
          }
        }
      }
    },
    "/api/v1/addFavoriteProvider": {
      "post": {
        "tags": [
          "Patient"
        ],
        "description": "Add Favorite",
        "operationId": "Add Favorite",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "favoriteId",
            "in": "formData",
            "description": "Id of favorite",
            "required": false,
            "type": "integer",
            "default": "1"
          },
          {
            "name": "access_token",
            "in": "header",
            "description": "access token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Favourite added successfully",
            "schema": {
              "$ref": "#/definitions/addFavorite200"
            }
          },
          "409": {
            "description": "Favourite already exist",
            "schema": {
              "$ref": "#/definitions/addFavorite409"
            }
          },
          "401": {
            "description": "Favourite not exist",
            "schema": {
              "$ref": "#/definitions/addFavorite401"
            }
          },
          "500": {
            "description": "Internal Server error- Cannot save user",
            "schema": {
              "$ref": "#/definitions/addFavorite500"
            }
          }
        }
      }
    },
    "/api/v1/removeFavorite/{favoriteId}": {
      "delete": {
        "tags": [
          "Patient"
        ],
        "description": "Remove Favorite",
        "operationId": "Remove Favorite",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "favoriteId",
            "in": "path",
            "description": "Id of favorite",
            "required": false,
            "type": "integer",
            "default": "1"
          },
          {
            "name": "access_token",
            "in": "header",
            "description": "access token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Favourite added successfully",
            "schema": {
              "$ref": "#/definitions/removeFavorite200"
            }
          },
          "401": {
            "description": "Favourite not exist",
            "schema": {
              "$ref": "#/definitions/removeFavorite401"
            }
          },
          "500": {
            "description": "Internal Server error- Cannot save user",
            "schema": {
              "$ref": "#/definitions/removeFavorite500"
            }
          }
        }
      }
    },
    "/api/v1/updateProfile": {
      "post": {
        "tags": [
          "Patient"
        ],
        "description": "Update Profile",
        "operationId": "Update Profile",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "access_token",
            "in": "header",
            "description": "access_token",
            "type": "string",
            "required": true,
            "default": ""
          },
          {
            "name": "address",
            "in": "formData",
            "description": "User address",
            "required": true,
            "type": "string",
            "default": "Mobikasa,Ghitorni"
          }, {
            "name": "city",
            "in": "formData",
            "description": "User city",
            "required": true,
            "type": "integer",
            "default": "1"
          }, {
            "name": "state",
            "in": "formData",
            "description": "User state",
            "required": true,
            "type": "integer",
            "default": "1"
          },
          {
            "name": "zipCode",
            "in": "formData",
            "description": "User zip_code",
            "required": true,
            "type": "integer",
            "default": "208020"
          },
          {
            "name": "dateOfBirth",
            "in": "formData",
            "description": "User date_of_birth",
            "required": true,
            "type": "string",
            "default": "2019-07-29"
          },
          {
            "name": "gender",
            "in": "formData",
            "description": "User gender (eg: 1/2/3/4)",
            "required": true,
            "type": "integer",
            "default": "1"
          },
          {
            "name": "clinicCode",
            "in": "formData",
            "description": "User clinic_code",
            "type": "string",
            "default": "45"
          },
          {
            "name": "country",
            "in": "formData",
            "description": "User country",
            "required": true,
            "type": "integer",
            "default": "1"
          },
          {
            "name": "latitude",
            "in": "formData",
            "description": "latitude",
            "type": "string",
            "default": "52.0"
          },
          {
            "name": "longitude",
            "in": "formData",
            "description": "longitude",
            "type": "string",
            "default": "15.0"
          },
          {
            "name": "fileDescription",
            "in": "formData",
            "description": "file description of uploaded file ex. [\"1542451274.jpg\"]",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Address successfully saved/updated",
            "schema": {
              "$ref": "#/definitions/updateProfile200"
            }
          },
          "400": {
            "description": "Token Expired",
            "schema": {
              "$ref": "#/definitions/updateProfile400"
            }
          },
          "500": {
            "description": "Internal Server error- Something went wrong",
            "schema": {
              "$ref": "#/definitions/updateProfile500"
            }
          }
        }
      }
    },
    "/api/v1/updatePatientProfile": {
      "post": {
        "tags": [
          "Patient"
        ],
        "description": "Update Patient Profile",
        "operationId": "Update Patient Profile",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "access_token",
            "in": "header",
            "description": "access_token",
            "type": "string",
            "required": true,
            "default": ""
          },
          {
            "name": "address",
            "in": "formData",
            "description": "User address",
            "required": true,
            "type": "string",
            "default": "Mobikasa,Ghitorni"
          }, {
            "name": "city",
            "in": "formData",
            "description": "User city",
            "required": true,
            "type": "integer",
            "default": "1"
          },
          {
            "name": "firstName",
            "in": "formData",
            "description": "User Name",
            "required": true,
            "type": "string",
            "default": "test"
          },
          {
            "name": "lastName",
            "in": "formData",
            "description": "User LastName",
            "required": true,
            "type": "string",
            "default": "test"
          }, {
            "name": "state",
            "in": "formData",
            "description": "User state",
            "required": true,
            "type": "integer",
            "default": "1"
          },
          {
            "name": "zipCode",
            "in": "formData",
            "description": "User zip_code",
            "required": true,
            "type": "integer",
            "default": "208020"
          },
          {
            "name": "dateOfBirth",
            "in": "formData",
            "description": "User date_of_birth",
            "required": true,
            "type": "string",
            "default": "2019-07-29"
          },
          {
            "name": "gender",
            "in": "formData",
            "description": "User gender (eg: 1/2/3/4)",
            "required": true,
            "type": "integer",
            "default": "1"
          },
          {
            "name": "clinicCode",
            "in": "formData",
            "description": "User clinic_code",
            "type": "string",
            "default": "45"
          },
          {
            "name": "country",
            "in": "formData",
            "description": "User country",
            "required": true,
            "type": "integer",
            "default": "1"
          },
          {
            "name": "telephone",
            "in": "formData",
            "description": "User telephone",
            "required": true,
            "type": "integer",
            "default": "1234567890"
          },
          {
            "name": "countryCode",
            "in": "formData",
            "description": "User country code",
            "required": true,
            "type": "string",
            "default": "+1"
          },
          {
            "name": "latitude",
            "in": "formData",
            "description": "latitude",
            "type": "string",
            "default": "52.0"
          },
          {
            "name": "longitude",
            "in": "formData",
            "description": "longitude",
            "type": "string",
            "default": "15.0"
          },
          {
            "name": "fileDescription",
            "in": "formData",
            "description": "file description of uploaded file ex. [\"1542451274.jpg\"]",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Address successfully saved/updated",
            "schema": {
              "$ref": "#/definitions/updateProfile200"
            }
          },
          "400": {
            "description": "Token Expired",
            "schema": {
              "$ref": "#/definitions/updateProfile400"
            }
          },
          "500": {
            "description": "Internal Server error- Something went wrong",
            "schema": {
              "$ref": "#/definitions/updateProfile500"
            }
          }
        }
      }
    },
    "/api/v1/uploadProfilePhoto": {
      "post": {
        "tags": [
          "Patient"
        ],
        "description": "Update Profile Photo",
        "operationId": "Update Profile Photo",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "image",
            "in": "formData",
            "description": "Upload file",
            "required": true,
            "type": "file"
          },
          {
            "name": "access_token",
            "in": "header",
            "description": "access_token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully Uploaded",
            "schema": {
              "$ref": "#/definitions/uploadProfilePhoto200"
            }
          },
          "400": {
            "description": "Please upload only these types/Please upload an image",
            "schema": {
              "$ref": "#/definitions/uploadProfilePhoto400"
            }
          },
          "500": {
            "description": "Cannot Upload File To Server error -- ",
            "schema": {
              "$ref": "#/definitions/uploadProfilePhoto500"
            }
          }
        }
      }
    },
    "/api/v1/saveFileType": {
      "post": {
        "tags": [
          "Patient"
        ],
        "description": "Save File Type",
        "operationId": "Save File Type",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "fileDescription",
            "in": "formData",
            "description": "[\"1542451274.jpg\"]",

            "type": "string"
          },
          {
            "name": "access_token",
            "in": "header",
            "description": "access_token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully Uploaded",
            "schema": {
              "$ref": "#/definitions/uploadProfilePhoto200"
            }
          },
          "400": {
            "description": "Please upload only these types/Please upload an image",
            "schema": {
              "$ref": "#/definitions/uploadProfilePhoto400"
            }
          },
          "500": {
            "description": "Cannot Upload File To Server error -- ",
            "schema": {
              "$ref": "#/definitions/uploadProfilePhoto500"
            }
          }
        }
      }
    },
    "/api/v1/uploadInsurance": {
      "post": {
        "tags": [
          "Patient"
        ],
        "description": "UploadInsurance",
        "operationId": "UploadInsurance",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "access_token",
            "in": "header",
            "description": "Access token",
            "required": true,
            "type": "string"
          },
          {
            "name": "image",
            "in": "formData",
            "description": "Upload file",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully Uploaded",
            "schema": {
              "$ref": "#/definitions/uploadProfilePhoto200"
            }
          },
          "400": {
            "description": "Please upload only these types/Please upload an image",
            "schema": {
              "$ref": "#/definitions/uploadProfilePhoto400"
            }
          },
          "500": {
            "description": "Cannot Upload File To Server error -- ",
            "schema": {
              "$ref": "#/definitions/uploadProfilePhoto500"
            }
          }
        }
      }
    },
    "/api/v1/admin/login": {
      "post": {
        "tags": [
          "Admin"
        ],
        "description": "Patient Login API",
        "operationId": "Login for admin",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "email",
            "in": "formData",
            "description": "E-mail address",
            "required": true,
            "type": "string",
            "default": "admin@gmail.com"
          },
          {
            "name": "password",
            "in": "formData",
            "description": "Password",
            "required": true,
            "type": "string",
            "default": "123456"
          },
          {
            "name": "device_token",
            "in": "header",
            "description": "Device token",
            "required": false,
            "type": "string"
          },
          {
            "name": "device_type",
            "in": "header",
            "description": "Device type",
            "required": false,
            "type": "string"
          },
          {
            "name": "device_id",
            "in": "header",
            "description": "Device id",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Login successfully",
            "schema": {
              "$ref": "#/definitions/adminlogin200"
            }
          },
          "401": {
            "description": "No such user found",
            "schema": {
              "$ref": "#/definitions/adminlogin401"
            }
          }
        }
      }
    },
    "/api/v1/admin/createProvider": {
      "post": {
        "tags": [
          "Admin"
        ],
        "description": "Create Provider",
        "operationId": "Create Provider",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "access_token",
            "in": "header",
            "description": "Access token",
            "required": true,
            "type": "string"
          },
          {
            "name": "first_name",
            "in": "formData",
            "description": "First name",
            "required": true,
            "type": "string",
            "default": "demo"
          },
          {
            "name": "last_name",
            "in": "formData",
            "description": "Last Name",
            "required": true,
            "type": "string",
            "default": "demo"
          },
          {
            "name": "email",
            "in": "formData",
            "description": "E-mail address for provider",
            "required": true,
            "type": "string",
            "default": "abc@gmail.com"
          },
          {
            "name": "password",
            "in": "formData",
            "description": "Account Password",
            "required": true,
            "type": "string",
            "default": "123456"
          },
          {
            "name": "country_code",
            "in": "formData",
            "description": "Country code of phone number",
            "required": true,
            "type": "string",
            "default": "+1"
          },
          {
            "name": "telephone",
            "in": "formData",
            "description": "Telephone number",
            "required": true,
            "type": "string",
            "default": "1245444454"
          },
          {
            "name": "date_of_birth",
            "in": "formData",
            "description": "Date of birth",
            "required": true,
            "type": "string",
            "default": "1982-10-29"
          },
          {
            "name": "gender",
            "in": "formData",
            "description": "Provider Gender (e.g Male => 1, Female =2, Other => 3, Not Specified => 4)",
            "required": true,
            "type": "integer",
            "default": "1"
          },
          {
            "name": "address",
            "in": "formData",
            "description": "Provider Address",
            "required": true,
            "type": "string",
            "default": "1"
          },
          {
            "name": "country",
            "in": "formData",
            "description": "Country Id",
            "required": true,
            "type": "string",
            "default": "1"
          },
          {
            "name": "state",
            "in": "formData",
            "description": "State or Province Name",
            "required": true,
            "type": "string",
            "default": "1"
          },
          {
            "name": "city",
            "in": "formData",
            "description": "City Name",
            "required": true,
            "type": "string",
            "default": "1"
          },
          {
            "name": "zip_code",
            "in": "formData",
            "description": "Zip Code",
            "required": true,
            "type": "string",
            "default": "11211"
          },
          {
            "name": "bio",
            "in": "formData",
            "description": "Bio of provider",
            "required": true,
            "type": "string"
          },
          {
            "name": "specialization",
            "in": "formData",
            "description": "Specialization of provider",
            "required": true,
            "type": "string"
          },
          {
            "name": "language_speaks",
            "in": "formData",
            "description": "Language known",
            "required": true,
            "type": "string",
            "default": "English, German, French"
          },
          {
            "name": "availability",
            "in": "formData",
            "description": "Availability of provider",
            "required": false,
            "type": "string"
          },
          {
            "name": "latitude",
            "in": "formData",
            "description": "Latitude",
            "required": false,
            "type": "string"
          },
          {
            "name": "longitude",
            "in": "formData",
            "description": "Longitude",
            "required": false,
            "type": "string"
          },
          {
            "name": "fileDescription",
            "in": "formData",
            "description": "Profile Image Name",
            "required": false,
            "type": "string",
            "default": "[\"profile_image.jpg\"]"
          },
          {
            "name": "doctorFee",
            "in": "formData",
            "description": "Doctor Fee",
            "required": true,
            "type": "number",
            "default": "30.0"
          }
        ],
        "responses": {
          "200": {
            "description": "Provider created successfully",
            "schema": {
              "$ref": "#/definitions/createProvider200"
            }
          },
          "409": {
            "description": "Provider already exists",
            "schema": {
              "$ref": "#/definitions/createProvider409"
            }
          },
          "500": {
            "description": "Internal Server error- Cannot create provider",
            "schema": {
              "$ref": "#/definitions/createProvider500"
            }
          }
        }
      }
    },
    "/api/v1/admin/updateProvider": {
      "put": {
        "tags": [
          "Admin"
        ],
        "description": "Update Provider",
        "operationId": "Update Provider",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "access_token",
            "in": "header",
            "description": "Access token",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "formData",
            "description": "User id of provider",
            "required": true,
            "type": "integer"
          },
          {
            "name": "first_name",
            "in": "formData",
            "description": "First name",
            "required": true,
            "type": "string",
            "default": "demo"
          },
          {
            "name": "last_name",
            "in": "formData",
            "description": "Last Name",
            "required": true,
            "type": "string",
            "default": "demo"
          },
          {
            "name": "country_code",
            "in": "formData",
            "description": "Country code of phone number",
            "required": true,
            "type": "string",
            "default": "+1"
          },
          {
            "name": "telephone",
            "in": "formData",
            "description": "Telephone number",
            "required": true,
            "type": "string",
            "default": "1245444454"
          },
          {
            "name": "date_of_birth",
            "in": "formData",
            "description": "Date of birth",
            "required": true,
            "type": "string",
            "default": "1982-10-29"
          },
          {
            "name": "gender",
            "in": "formData",
            "description": "Provider Gender (e.g 1/2/3/4)",
            "required": true,
            "type": "integer",
            "default": "male"
          },
          {
            "name": "address",
            "in": "formData",
            "description": "Provider Address",
            "required": true,
            "type": "string",
            "default": "New York"
          },
          {
            "name": "country",
            "in": "formData",
            "description": "Country Id",
            "required": true,
            "type": "string",
            "default": "USA"
          },
          {
            "name": "state",
            "in": "formData",
            "description": "State or Province Name",
            "required": true,
            "type": "string",
            "default": "New York"
          },
          {
            "name": "city",
            "in": "formData",
            "description": "City Name",
            "required": true,
            "type": "string",
            "default": "New York"
          },
          {
            "name": "zip_code",
            "in": "formData",
            "description": "Zip Code",
            "required": true,
            "type": "string",
            "default": "11211"
          },
          {
            "name": "bio",
            "in": "formData",
            "description": "Bio of provider",
            "required": true,
            "type": "string"
          },
          {
            "name": "specialization",
            "in": "formData",
            "description": "Specialization of provider",
            "required": true,
            "type": "string"
          },
          {
            "name": "language_speaks",
            "in": "formData",
            "description": "Language known",
            "required": true,
            "type": "string",
            "default": "English, German, French"
          },
          {
            "name": "availability",
            "in": "formData",
            "description": "Availability of provider",
            "required": false,
            "type": "string"
          },
          {
            "name": "latitude",
            "in": "formData",
            "description": "Latitude",
            "required": false,
            "type": "string"
          },
          {
            "name": "longitude",
            "in": "formData",
            "description": "Longitude",
            "required": false,
            "type": "string"
          },
          {
            "name": "doctorFee",
            "in": "formData",
            "description": "Doctor Fee",
            "required": true,
            "type": "number",
            "default": "30.0"
          },
          {
            "name": "fileDescription",
            "in": "formData",
            "description": "Profile Image Name",
            "required": false,
            "type": "string",
            "default": "[\"profile_image.jpg\"]"
          }
        ],
        "responses": {
          "200": {
            "description": "Provider updated successfully",
            "schema": {
              "$ref": "#/definitions/updateProvider200"
            }
          },
          "409": {
            "description": "Provider email already exists",
            "schema": {
              "$ref": "#/definitions/updateProvider409"
            }
          },
          "500": {
            "description": "Internal Server error- Cannot update provider",
            "schema": {
              "$ref": "#/definitions/updateProvider500"
            }
          }
        }
      }
    },
    "/api/v1/admin/getProvidersList": {
      "get": {
        "tags": [
          "Admin"
        ],
        "description": "Get all provider list",
        "operationId": "Get all provider list",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "access_token",
            "in": "header",
            "description": "Access token",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "page number",
            "required": false,
            "type": "string"
          },
          {
            "name": "query",
            "in": "query",
            "description": "search",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "asc or desc",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "(email,firstName,lastName)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Allergies and medical added",
            "schema": {
              "$ref": "#/definitions/getProvider200"
            }
          },
          "500": {
            "description": "Internal Server error- Cannot save user",
            "schema": {
              "$ref": "#/definitions/getProvider500"
            }
          }
        }
      }
    },
    "/api/v1/admin/getProvider/{id}": {
      "get": {
        "tags": [
          "Admin"
        ],
        "description": "Get Provider details",
        "operationId": "Get Provider details",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "access_token",
            "in": "header",
            "description": "Access token",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Provider id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "getProviderAdded",
            "schema": {
              "$ref": "#/definitions/getProvider200"
            }
          },
          "409": {
            "description": "No such user found",
            "schema": {
              "$ref": "#/definitions/getProvider409"
            }
          },
          "500": {
            "description": "Internal Server error- Cannot save user",
            "schema": {
              "$ref": "#/definitions/getProvider500"
            }
          }
        }
      }
    },
    "/api/v1/admin/deleteProvider/{id}": {
      "delete": {
        "tags": [
          "Admin"
        ],
        "description": "Delete Provider Record",
        "operationId": "Delete Provider Record",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "access_token",
            "in": "header",
            "description": "Access token",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Provider id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Provider record deleted",
            "schema": {
              "$ref": "#/definitions/deleteProvider200"
            }
          },
          "409": {
            "description": "No such user found",
            "schema": {
              "$ref": "#/definitions/deleteProvider409"
            }
          },
          "500": {
            "description": "Internal Server error- Cannot delete user",
            "schema": {
              "$ref": "#/definitions/deleteProvider500"
            }
          }
        }
      }
    },
    "/api/v1/admin/changeProviderStatus": {
      "post": {
        "tags": [
          "Admin"
        ],
        "description": "Change Status of Provider",
        "operationId": "for the URL",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "userId",
            "in": "formData",
            "description": "user id",
            "required": true,
            "type": "integer",
            "default": "4"
          },
          {
            "name": "access_token",
            "in": "header",
            "description": "access_token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Provider status changed",
            "schema": {
              "$ref": "#/definitions/changeProviderStatus200"
            }
          },
          "401": {
            "description": "No such user found",
            "schema": {
              "$ref": "#/definitions/changeProviderStatus401"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/changeProviderStatus500"
            }
          }
        }
      }
    },
    "/api/v1/admin/insuranceList": {
      "get": {
        "tags": [
          "Admin"
        ],
        "description": "Get all insurance list",
        "operationId": "Get all insurance list",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "access_token",
            "in": "header",
            "description": "Access token",
            "required": true,
            "type": "string"
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "order by",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "page number",
            "required": false,
            "type": "string"
          },
          {
            "name": "query",
            "in": "query",
            "description": "search",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "(firstName,insuranceVerifiedByName,policyHolderName,insuranceCompanyName,updatedAt,groupId,memberId,createdAt)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No data found/Insurance Fetched Successfully",
            "schema": {
              "$ref": "#/definitions/insuranceList200"
            }
          },
          "500": {
            "description": "Internal Server error- Cannot save user",
            "schema": {
              "$ref": "#/definitions/insuranceList500"
            }
          }
        }
      }
    },
    "/api/v1/admin/updateInsuranceStatus": {
      "put": {
        "tags": [
          "Admin"
        ],
        "description": "Update insurance status",
        "operationId": "Update insurance status",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "access_token",
            "in": "header",
            "description": "Access token",
            "required": true,
            "type": "string"
          },
          {
            "name": "insuranceStatus",
            "in": "formData",
            "description": "insurance status",
            "required": true,
            "type": "integer",
            "example": "0 => unverified, 1 => verified, 2 => rejected"
          },
          {
            "name": "userId",
            "in": "formData",
            "description": "user id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Insurance successfully updated to 1",
            "schema": {
              "$ref": "#/definitions/updateInsuranceStatus200"
            }
          },
          "500": {
            "description": "Internal Server error- Cannot save user",
            "schema": {
              "$ref": "#/definitions/updateInsuranceStatus500"
            }
          },
          "401": {
            "description": "Internal Server error- Cannot save user",
            "schema": {
              "$ref": "#/definitions/updateInsuranceStatus401"
            }
          }
        }
      }
    },
    "/api/v1/admin/getInsuranceDetail/{id}": {
      "get": {
        "tags": [
          "Admin"
        ],
        "description": "Get Insurance Details",
        "operationId": "Get Insurance Details",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "access_token",
            "in": "header",
            "description": "Access token",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "user id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Insurance successfully updated to 1",
            "schema": {
              "$ref": "#/definitions/getInsuranceDetail200"
            }
          },
          "500": {
            "description": "Internal Server error- Cannot save user",
            "schema": {
              "$ref": "#/definitions/getInsuranceDetail500"
            }
          },
          "401": {
            "description": "Internal Server error- Cannot save user",
            "schema": {
              "$ref": "#/definitions/getInsuranceDetail401"
            }
          }
        }
      }
    },
    "/api/v1/getQuestionnaire": {
      "get": {
        "tags": [
          "Patient"
        ],
        "description": "Get all questions list",
        "operationId": "Get all questions list",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "access_token",
            "in": "header",
            "description": "Access token",
            "required": true,
            "type": "string"
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "order by",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "page number",
            "required": false,
            "type": "string"
          },
          {
            "name": "query",
            "in": "query",
            "description": "search",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Questions Successfully Fetched",
            "schema": {
              "$ref": "#/definitions/getQuestionnaire200"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/getQuestionnaire500"
            }
          }
        }
      }
    },
    "/api/v1/admin/getQuestionnaireById/{questionId}": {
      "get": {
        "tags": [
          "Admin"
        ],
        "description": "Get questions",
        "operationId": "Get questions",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "access_token",
            "in": "header",
            "description": "Access token",
            "required": true,
            "type": "string"
          },
          {
            "name": "questionId",
            "in": "path",
            "description": "search",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Questions Successfully Fetched",
            "schema": {
              "$ref": "#/definitions/getQuestionnaire200"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/getQuestionnaire500"
            }
          }
        }
      }
    },
    "/api/v1/admin/getQuestionnaire": {
      "get": {
        "tags": [
          "Admin"
        ],
        "description": "Get all questions list",
        "operationId": "Get all questions list",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "access_token",
            "in": "header",
            "description": "Access token",
            "required": true,
            "type": "string"
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "order by",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "page number",
            "required": false,
            "type": "string"
          },
          {
            "name": "query",
            "in": "query",
            "description": "search",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Questions Successfully Fetched",
            "schema": {
              "$ref": "#/definitions/getQuestionnaire200"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/getQuestionnaire500"
            }
          }
        }
      }
    },
    "/api/v1/admin/saveQuestionnaire": {
      "post": {
        "tags": [
          "Admin"
        ],
        "description": "Save Questionnaire",
        "operationId": "Save Questionnaire",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "access_token",
            "in": "header",
            "description": "Access token",
            "required": true,
            "type": "string"
          },
          {
            "name": "question",
            "in": "formData",
            "description": "Question to be asked",
            "required": true,
            "type": "string"
          },
          {
            "name": "sortOrder",
            "in": "formData",
            "description": "sortOrder of question",
            "required": true,
            "type": "integer",
            "default": 1
          },
          {
            "name": "inputType",
            "in": "formData",
            "description": "inputType for that question",
            "required": true,
            "type": "integer",
            "default": 1
          },
          {
            "name": "maxCharacter",
            "in": "formData",
            "description": "maxCharacter for that perticular field",
            "required": true,
            "type": "integer",
            "default": 20
          },
          {
            "name": "id",
            "in": "formData",
            "description": "id which is to be updated",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Questionnaire successfully created/updated",
            "schema": {
              "$ref": "#/definitions/saveQuestionnaire200"
            }
          },
          "401": {
            "description": "Questionnaire not exists for particular id",
            "schema": {
              "$ref": "#/definitions/saveQuestionnaire401"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/saveQuestionnaire500"
            }
          }
        }
      }
    },
    "/api/v1/admin/deleteQuestionnaire/{id}": {
      "delete": {
        "tags": [
          "Admin"
        ],
        "description": "delete questionnaire",
        "operationId": "delete questionnaire",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "access_token",
            "in": "header",
            "description": "Access token",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Questionnaire id to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Questionnaire Deleted",
            "schema": {
              "$ref": "#/definitions/deleteQuestionnaire200"
            }
          },
          "401": {
            "description": "Questionnaire Not Found",
            "schema": {
              "$ref": "#/definitions/deleteQuestionnaire401"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/deleteQuestionnaire500"
            }
          }
        }
      }
    },
    "/api/v1/admin/dashboard": {
      "get": {
        "tags": [
          "Admin"
        ],
        "description": "Dashboard",
        "operationId": "Dashboard",
        "produces": [
          "application/json"
        ],
        "parameters": [{
          "name": "access_token",
          "in": "header",
          "description": "Access token",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "Data fetched successfully",
            "schema": {
              "$ref": "#/definitions/dashboard200"
            }
          },
          "401": {
            "description": "Data not found",
            "schema": {
              "$ref": "#/definitions/dashboard401"
            }
          },
          "500": {
            "description": "Internal Server error- Cannot save user",
            "schema": {
              "$ref": "#/definitions/dashboard500"
            }
          }
        }
      }
    },
    "/api/v1/getProvidersList": {
      "get": {
        "tags": [
          "Provider"
        ],
        "description": "Get all provider list",
        "operationId": "Get all provider list",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "access_token",
            "in": "header",
            "description": "Access token",
            "required": true,
            "type": "string"
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "order by",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "page number",
            "required": false,
            "type": "string"
          },
          {
            "name": "query",
            "in": "query",
            "description": "search",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Allergies and medical added",
            "schema": {
              "$ref": "#/definitions/getProvidersList200"
            }
          },
          "500": {
            "description": "Internal Server error- Cannot save user",
            "schema": {
              "$ref": "#/definitions/getProvidersList500"
            }
          }
        }
      }
    },
    "/api/v1/providerHome": {
      "post": {
        "tags": [
          "Provider"
        ],
        "description": "Provider Home",
        "operationId": "Provider Home",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "access_token",
            "in": "header",
            "description": "Access token",
            "required": true,
            "type": "string"
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "order by",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "page number",
            "required": false,
            "type": "string"
          },
          {
            "name": "query",
            "in": "query",
            "description": "search",
            "required": false,
            "type": "string"
          },
          {
            "name": "appointmentTime",
            "in": "formData",
            "description": "appointment time",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Data found",
            "schema": {
              "$ref": "#/definitions/providerHome200"
            }
          },
          "409": {
            "description": "Data not found",
            "schema": {
              "$ref": "#/definitions/providerHome401"
            }
          }
        }
      }
    },
    "/api/v1/getProvider/{id}": {
      "get": {
        "tags": [
          "Provider"
        ],
        "description": "Get Provider details",
        "operationId": "Get Provider details",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "access_token",
            "in": "header",
            "description": "Access token",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Provider id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Allergies and medical added",
            "schema": {
              "$ref": "#/definitions/getProviderWithId200"
            }
          },
          "404": {
            "description": "Provider not Found",
            "schema": {
              "$ref": "#/definitions/getProviderWithId404"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/getProviderWithId500"
            }
          }
        }
      }
    },
    "/api/v1/updateProvider": {
      "put": {
        "tags": [
          "Provider"
        ],
        "description": "Update Provider",
        "operationId": "Update Provider",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "access_token",
            "in": "header",
            "description": "Access token",
            "required": true,
            "type": "string"
          },
          {
            "name": "firstName",
            "in": "formData",
            "description": "First name",
            "required": true,
            "type": "string",
            "default": "demo"
          },
          {
            "name": "lastName",
            "in": "formData",
            "description": "Last Name",
            "required": true,
            "type": "string",
            "default": "demo"
          },
          {
            "name": "countryCode",
            "in": "formData",
            "description": "Country code of phone number",
            "required": true,
            "type": "string",
            "default": "+1"
          },
          {
            "name": "telephone",
            "in": "formData",
            "description": "Telephone number",
            "required": true,
            "type": "string",
            "default": "1245444454"
          },
          {
            "name": "dateOfBirth",
            "in": "formData",
            "description": "Date of birth",
            "required": true,
            "type": "string",
            "default": "1982-10-29"
          },
          {
            "name": "gender",
            "in": "formData",
            "description": "Provider Gender (e.g Male => 1, Female =2, Other => 3, Not Specified => 4)",
            "required": true,
            "type": "integer",
            "default": "1"
          },
          {
            "name": "address",
            "in": "formData",
            "description": "Provider Address",
            "required": true,
            "type": "string",
            "default": "New York"
          },
          {
            "name": "country",
            "in": "formData",
            "description": "Country Id",
            "required": true,
            "type": "string",
            "default": "1"
          },
          {
            "name": "state",
            "in": "formData",
            "description": "State or Province Name",
            "required": true,
            "type": "string",
            "default": "1"
          },
          {
            "name": "city",
            "in": "formData",
            "description": "City Name",
            "required": true,
            "type": "string",
            "default": "1"
          },
          {
            "name": "zipCode",
            "in": "formData",
            "description": "Zip Code",
            "required": true,
            "type": "string",
            "default": "11211"
          },
          {
            "name": "bio",
            "in": "formData",
            "description": "Bio of provider",
            "required": true,
            "type": "string"
          },
          {
            "name": "specialization",
            "in": "formData",
            "description": "Specialization of provider",
            "required": true,
            "type": "string"
          },
          {
            "name": "languageSpeaks",
            "in": "formData",
            "description": "Language known",
            "required": true,
            "type": "string",
            "default": "English, German, French"
          },
          {
            "name": "availability",
            "in": "formData",
            "description": "Availability of provider",
            "required": false,
            "type": "string"
          },
          {
            "name": "fileDescription",
            "in": "formData",
            "description": "file description of uploaded file ex. [\"1565093919315.png\"]",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Provider updated successfully",
            "schema": {
              "$ref": "#/definitions/updateProviderInfo200"
            }
          },
          "409": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/updateProviderInfo401"
            }
          },
          "500": {
            "description": "Internal Server error- Cannot update provider",
            "schema": {
              "$ref": "#/definitions/updateProviderInfo500"
            }
          }
        }
      }
    },
    "/api/v1/listFavoriteProviders": {
      "get": {
        "tags": [
          "Patient"
        ],
        "description": "List Favourites",
        "operationId": "List Favourites",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "access_token",
            "in": "header",
            "description": "Access token",
            "required": true,
            "type": "string"
          },
          {
            "name": "query",
            "in": "query",
            "description": "Search Query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page Number",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Favourite Fetched Successfully",
            "schema": {
              "$ref": "#/definitions/listFavoriteProviders200"
            }
          },
          "500": {
            "description": "Internal Server error- Cannot Fetch Favorites",
            "schema": {
              "$ref": "#/definitions/listFavoriteProviders500"
            }
          }
        }
      }
    },
    "/api/v1/admin/getAllPatientDetails": {
      "get": {
        "tags": [
          "Admin"
        ],
        "description": "List Patient For Admin",
        "operationId": "List Favourites",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "access_token",
            "in": "header",
            "description": "Access token",
            "required": true,
            "type": "string"
          },
          {
            "name": "query",
            "in": "query",
            "description": "Search Query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page Number",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "asc or desc",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "(email,firstName,lastName)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Patient List Fetched Successfully",
            "schema": {
              "$ref": "#/definitions/getAllPatientDetails200"
            }
          },
          "500": {
            "description": "Internal Server error- Cannot Fetch Patient",
            "schema": {
              "$ref": "#/definitions/getAllPatientDetails500"
            }
          }
        }
      }
    },
    "/api/v1/admin/deletePatient/{id}": {
      "delete": {
        "tags": [
          "Admin"
        ],
        "description": "Delete Patient Record",
        "operationId": "Delete Patient Record",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "access_token",
            "in": "header",
            "description": "Access token",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Patient id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Patient record deleted",
            "schema": {
              "$ref": "#/definitions/deletePatient200"
            }
          },
          "409": {
            "description": "No such user found",
            "schema": {
              "$ref": "#/definitions/deletePatient409"
            }
          },
          "500": {
            "description": "Internal Server error- Cannot delete user",
            "schema": {
              "$ref": "#/definitions/deletePatient500"
            }
          }
        }
      }
    },
    "/api/v1/admin/getPatient/{id}": {
      "get": {
        "tags": [
          "Admin"
        ],
        "description": "Get Patient details",
        "operationId": "Get Patient details",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "access_token",
            "in": "header",
            "description": "Access token",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Patient id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Patient found",
            "schema": {
              "$ref": "#/definitions/getPatient200"
            }
          },
          "409": {
            "description": "Patient not found",
            "schema": {
              "$ref": "#/definitions/getPatient404"
            }
          },
          "500": {
            "description": "Internal Server error- Cannot save user",
            "schema": {
              "$ref": "#/definitions/getPatient500"
            }
          }
        }
      }
    },
    "/api/v1/admin/changePatientStatus": {
      "post": {
        "tags": [
          "Admin"
        ],
        "description": "Change Status of Patient",
        "operationId": "for the URL",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "userId",
            "in": "formData",
            "description": "user id",
            "required": true,
            "type": "integer",
            "default": "4"
          },
          {
            "name": "access_token",
            "in": "header",
            "description": "access_token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Patient Status changed",
            "schema": {
              "$ref": "#/definitions/changePatientStatus200"
            }
          },
          "401": {
            "description": "No such user found",
            "schema": {
              "$ref": "#/definitions/changePatientStatus401"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/changePatientStatus500"
            }
          }
        }
      }
    },
    "/api/v1/admin/uploadProfilePhoto": {
      "post": {
        "tags": [
          "Admin"
        ],
        "description": "Update Profile Photo (Admin)",
        "operationId": "Update Profile Photo (Admin)",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "image",
            "in": "formData",
            "description": "Upload file",
            "required": true,
            "type": "file"
          },
          {
            "name": "access_token",
            "in": "header",
            "description": "access_token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully Uploaded",
            "schema": {
              "$ref": "#/definitions/uploadProfilePhoto200"
            }
          },
          "400": {
            "description": "Please upload only these types/Please upload an image",
            "schema": {
              "$ref": "#/definitions/uploadProfilePhoto400"
            }
          },
          "500": {
            "description": "Cannot Upload File To Server error -- ",
            "schema": {
              "$ref": "#/definitions/uploadProfilePhoto500"
            }
          }
        }
      }
    },
    "/api/v1/getClientToken": {
      "get": {
        "tags": [
          "Patient"
        ],
        "description": "Get Client token",
        "operationId": "Get Client token",
        "produces": [
          "application/json"
        ],
        "parameters": [{
          "name": "access_token",
          "in": "header",
          "description": "access_token",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "Client token created",
            "schema": {
              "$ref": "#/definitions/getClientToken200"
            }
          },
          "404": {
            "description": "Client token not generated",
            "schema": {
              "$ref": "#/definitions/getClientToken404"
            }
          }
        }
      }
    },
    "/api/v1/addCard": {
      "post": {
        "tags": [
          "Patient"
        ],
        "description": "Add Credit Card",
        "operationId": "Add Credit Card",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "access_token",
            "in": "header",
            "description": "access token",
            "required": true,
            "type": "string"
          },
          {
            "name": "nonceFromTheClient",
            "in": "formData",
            "description": "Nonce to be sent from client",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Card added successfully",
            "schema": {
              "$ref": "#/definitions/addCard200"
            }
          },
          "500": {
            "description": "Internal Server error- Cannot save user",
            "schema": {
              "$ref": "#/definitions/addFavorite500"
            }
          }
        }
      }
    },
    "/api/v1/removeCard/{id}": {
      "delete": {
        "tags": [
          "Patient"
        ],
        "description": "Remove Card",
        "operationId": "Remove Card",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "access_token",
            "in": "header",
            "description": "access token",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Card Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Card removed successfully",
            "schema": {
              "$ref": "#/definitions/removeCard200"
            }
          },
          "401": {
            "description": "Card already deleted or not exist",
            "schema": {
              "$ref": "#/definitions/removeCard401"
            }
          }
        }
      }
    },
    "/api/v1/getCards": {
      "get": {
        "tags": [
          "Patient"
        ],
        "description": "Get Saved Cards List",
        "operationId": "Get Saved Cards List",
        "produces": [
          "application/json"
        ],
        "parameters": [{
          "name": "access_token",
          "in": "header",
          "description": "access token",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "Cards found",
            "schema": {
              "$ref": "#/definitions/getCards200"
            }
          }
        }
      }
    },
    "/api/v1/checkProviderAvailibility": {
      "post": {
        "tags": [
          "Patient"
        ],
        "description": "Check doctor availibility",
        "operationId": "Check doctor availibility",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "access_token",
            "in": "header",
            "description": "access token",
            "required": true,
            "type": "string"
          },
          {
            "name": "providerId",
            "in": "formData",
            "description": "Provider Id",
            "required": true,
            "type": "number"
          },
          {
            "name": "childId",
            "in": "formData",
            "description": "Child Id",
            "required": false,
            "type": "number"
          },          
          {
            "name": "type",
            "in": "formData",
            "description": "Type will be used for consult now or schedule \n Example. 0 => consult now, 1 => schedule",
            "required": true,
            "type": "number"
          },
          {
            "name": "timeZone",
            "in": "formData",
            "description": "TimeZone eg Asia/Kolkata",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Doctor is available.",
            "schema": {
              "$ref": "#/definitions/checkDoctorAvailibility200success"
            }
          },
          "500": {
            "description": "Something went wrong",
            "schema": {
              "$ref": "#/definitions/checkDoctorAvailibility500"
            }
          }
        }
      }
    },
    "/api/v1/saveProviderSchedule": {
      "post": {
        "tags": [
          "Provider"
        ],
        "description": "Save provider schedule",
        "operationId": "Save provider schedule",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "access_token",
            "in": "header",
            "description": "access token",
            "required": true,
            "type": "string"
          },
          {
            "name": "scheduleDate",
            "in": "formData",
            "description": "Schedule date",
            "default": "2019-08-29",
            "required": true,
            "type": "string"
          },
          {
            "name": "scheduleTimeSlots",
            "in": "formData",
            "description": "Time slots \n Example: [{ \"fromTime\": 1568074500000, \"toTime\":1568117700000},{ \"fromTime\": 1568128500000, \"toTime\":1568159100000}]",
            "required": true,
            "type": "string"
          },
          {
            "name": "useForMonth",
            "in": "formData",
            "description": "Eg. 1 => Same schedule for month, 0 => Schedule for given date",
            "required": true,
            "type": "string"
          },
          {
            "name": "timeZone",
            "in": "formData",
            "description": "Asia/Kabul",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully Saved.",
            "schema": {
              "$ref": "#/definitions/saveProviderSchedule200"
            }
          },
          "500": {
            "description": "Internal Server error- Cannot save schedule",
            "schema": {
              "$ref": "#/definitions/saveProviderSchedule500"
            }
          }
        }
      }
    },
    "/api/v1/deleteSchedule": {
      "delete": {
        "tags": [
          "Provider"
        ],
        "description": "Delete provider schedule",
        "operationId": "Delete provider schedule",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "access_token",
            "in": "header",
            "description": "access token",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "query",
            "description": "id for schedule",
            "default": "0b182fa3-c3e2-4470-9677-4239ceaa77e5",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully Deleted./Not Granted",
            "schema": {
              "$ref": "#/definitions/deleteSchedule200"
            }
          },
          "500": {
            "description": "Internal Server error- Cannot save schedule",
            "schema": {
              "$ref": "#/definitions/deleteSchedule500"
            }
          }
        }
      }
    },
    "/api/v1/clearProviderSchedule": {
      "delete": {
        "tags": [
          "Provider"
        ],
        "description": "Clear provider calander schedule",
        "operationId": "Clear provider calander schedule",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "access_token",
            "in": "header",
            "description": "access token",
            "required": true,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type will be (eg: day or month)",
            "default": "day",
            "required": true,
            "type": "string"
          },
          {
            "name": "value",
            "in": "query",
            "description": "Value will be number (eg: for day it should be time in millisecond 1576077949000 and for month it should be numeric month ( 2 => Feb, 3 => Mar etc))",
            "default": 1576077949000,
            "required": true,
            "type": "number"
          }          
        ],
        "responses": {
          "200": {
            "description": "Successfully Deleted./Not Granted",
            "schema": {
              "$ref": "#/definitions/clearProviderSchedule200"
            }
          },
          "500": {
            "description": "Internal Server error- Cannot save schedule",
            "schema": {
              "$ref": "#/definitions/clearProviderSchedule500"
            }
          }
        }
      }
    },    
    "/api/v1/getProviderScheduleForMonth": {
      "get": {
        "tags": [
          "Provider"
        ],
        "description": "Get provider schedule for month",
        "operationId": "Get provider schedule for month",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "access_token",
            "in": "header",
            "description": "access token",
            "required": true,
            "type": "string"
          },
          {
            "name": "month",
            "in": "query",
            "description": "Schedule Month",
            "default": "8",
            "required": true,
            "type": "number"
          }

        ],
        "responses": {
          "200": {
            "description": "Filled Slots Fetched Successfully",
            "schema": {
              "$ref": "#/definitions/getProviderScheduleForMonth200"
            }
          },
          "500": {
            "description": "Internal Server error- Cannot fetched schedule",
            "schema": {
              "$ref": "#/definitions/getProviderScheduleForMonth500"
            }
          }
        }
      }
    },
    "/api/v1/getProviderTimeSlotsForDate": {
      "get": {
        "tags": [
          "Patient"
        ],
        "description": "Get provider time slots for date",
        "operationId": "Get provider time slots for date",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "access_token",
            "in": "header",
            "description": "access token",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "query",
            "description": "Provider schedule date id",
            "default": "4532c6b4-62fc-4546-a50e-d604e00321d8",
            "required": true,
            "type": "string"
          },
          {
            "name": "timeZone",
            "in": "query",
            "description": "TimeZone eg Asia/Kolkata",
            "required": true,
            "type": "string"
          },
          {
            "name": "date",
            "in": "query",
            "description": "2019-10-05",
            "required": true,
            "type": "string"
          },
          {
            "name": "providerId",
            "in": "query",
            "description": "1",
            "required": true,
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "Slots Fetched Successfully.",
            "schema": {
              "$ref": "#/definitions/getProviderTimeSlotsForDate200"
            }
          },
          "404": {
            "description": "No Slots For Particular Date",
            "schema": {
              "$ref": "#/definitions/getProviderTimeSlotsForDate404"
            }
          }
        }
      }
    },
    "/api/v1/scheduleAppointment": {
      "post": {
        "tags": [
          "Patient"
        ],
        "description": "Schedule Appointment",
        "operationId": "Schedule Appointment",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "access_token",
            "in": "header",
            "description": "access token",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "formData",
            "description": "Provider schedule time slot id",
            "default": "4532c6b4-62fc-4546-a50e-d604e00321d8",
            "required": true,
            "type": "string"
          },
          {
            "name": "childId",
            "in": "formData",
            "description": "Child Id",
            "required": false,
            "type": "number"
          }          
        ],
        "responses": {
          "200": {
            "description": "Appointment slot saved",
            "schema": {
              "$ref": "#/definitions/scheduleAppointment200"
            }
          },
          "400": {
            "description": "Selected time slot not available",
            "schema": {
              "$ref": "#/definitions/scheduleAppointment400"
            }
          },
          "404": {
            "description": "Selected time slot not exist",
            "schema": {
              "$ref": "#/definitions/scheduleAppointment404"
            }
          }
        }
      }
    },
    "/api/v1/uploadMedicalDocuments": {
      "post": {
        "tags": [
          "Patient"
        ],
        "description": "Update Medical Documents",
        "operationId": "Update Medical Documents",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "image",
            "in": "formData",
            "description": "Upload file",
            "required": true,
            "type": "file"
          },
          {
            "name": "access_token",
            "in": "header",
            "description": "access_token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully Uploaded",
            "schema": {
              "$ref": "#/definitions/uploadProfilePhoto200"
            }
          },
          "400": {
            "description": "Please upload only these types/Please upload an image",
            "schema": {
              "$ref": "#/definitions/uploadProfilePhoto400"
            }
          },
          "500": {
            "description": "Cannot Upload File To Server error -- ",
            "schema": {
              "$ref": "#/definitions/uploadProfilePhoto500"
            }
          }
        }
      }
    },
    "/api/v1/saveAppointmentDetails": {
      "post": {
        "tags": [
          "Patient"
        ],
        "description": "Save Appointment Details",
        "operationId": "Save Appointment Details",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "access_token",
            "in": "header",
            "description": "Access token",
            "required": true,
            "type": "string"
          },
          {
            "name": "appointmentDetails",
            "in": "formData",
            "description": "appointment details",
            "required": true,
            "type": "string",
            "default": "[{\"id\":\"abc\",\"answer\":\"1235\"},{\"id\":\"abc1\",\"answer\":\"12356\"}]"
          },
          {
            "name": "fileDescription",
            "in": "formData",
            "description": "medical documents",
            "required": false,
            "type": "string",
            "default": "[\"profile_image.jpg\"]"
          }
        ],
        "responses": {
          "200": {
            "description": "Appointment Details successfully saved",
            "schema": {
              "$ref": "#/definitions/saveAppointmentDetails200"
            }
          },
          "401": {
            "description": "Data not found",
            "schema": {
              "$ref": "#/definitions/saveAppointmentDetails401"
            }
          }
        }
      }
    },
    "/api/v1/admin/addPromoCode": {
      "post": {
        "tags": [
          "Admin"
        ],
        "description": "Add promo Code",
        "operationId": "Add promo Code",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "access_token",
            "in": "header",
            "description": "access token",
            "required": true,
            "type": "string"
          },
          {
            "name": "promoCode",
            "in": "formData",
            "description": "Promo Code",
            "default": "GIVE50",
            "required": true,
            "type": "string"
          },
          {
            "name": "discountPercent",
            "in": "formData",
            "description": "discount Percentage",
            "default": "50",
            "required": true,
            "type": "string"
          },
          {
            "name": "description",
            "in": "formData",
            "description": "Description of particular promo code",
            "default": "Ads",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Promo Saved Successfully",
            "schema": {
              "$ref": "#/definitions/addPromo200"
            }
          },
          "409": {
            "description": "Promo Saved Successfully",
            "schema": {
              "$ref": "#/definitions/addPromo409"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/addPromo500"
            }
          }
        }
      }
    },
    "/api/v1/admin/getPromoCodeList": {
      "get": {
        "tags": [
          "Admin"
        ],
        "description": "get promo Code list",
        "operationId": "get promo Code list",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "access_token",
            "in": "header",
            "description": "access token",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page Number min 1",
            "default": "1",
            "required": true,
            "type": "integer"
          },
          {
            "name": "query",
            "in": "query",
            "description": "Search Query",
            "default": "",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "(promoCode,discountPercent)",
            "default": "promoCode",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "asc or desc",
            "default": "asc",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Promo Saved Successfully",
            "schema": {
              "$ref": "#/definitions/getPromoCodeList200"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/getPromoCodeList500"
            }
          }
        }
      }
    },
    "/api/v1/validatePromoCode": {
      "post": {
        "tags": [
          "Patient"
        ],
        "description": "Validate Promo Code",
        "operationId": "Validate Promo Code",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "access_token",
            "in": "header",
            "description": "access token",
            "required": true,
            "type": "string"
          },
          {
            "name": "promoCode",
            "in": "formData",
            "description": "Promo Code",
            "default": "GIVE50",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "PromoCode Exists",
            "schema": {
              "$ref": "#/definitions/validatePromoCode200"
            }
          },
          "401": {
            "description": "PromoCode NOT Exists",
            "schema": {
              "$ref": "#/definitions/validatePromoCode401"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/validatePromoCode500"
            }
          }
        }
      }
    },
    "/api/v1/admin/updatePromoCode": {
      "post": {
        "tags": [
          "Admin"
        ],
        "description": "get promo Code list",
        "operationId": "Update promo Code list",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "access_token",
            "in": "header",
            "description": "access token",
            "required": true,
            "type": "string"
          },
          {
            "name": "promoCodeId",
            "in": "formData",
            "description": "Promo Code id",
            "default": "b2befa5b-54d0-4c40-85fc-d0ce868ba891",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "PromoCode Successfully Updated",
            "schema": {
              "$ref": "#/definitions/updatePromoCode200"
            }
          },
          "401": {
            "description": "PromoCode Not Exists",
            "schema": {
              "$ref": "#/definitions/updatePromoCode401"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/updatePromoCode500"
            }
          }
        }
      }
    },
    "/api/v1/admin/reviewsList": {
      "get": {
        "tags": [
          "Admin"
        ],
        "description": "Get all reviews list",
        "operationId": "Get all reviews list",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "access_token",
            "in": "header",
            "description": "Access token",
            "required": true,
            "type": "string"
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "order by",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "page number",
            "required": false,
            "type": "string"
          },
          {
            "name": "query",
            "in": "query",
            "description": "search",
            "required": false,
            "type": "string"
          },
          {
            "name": "userType",
            "in": "query",
            "description": "Type of user i.e 3 or 4(3 for patients 4 for providers)",
            "default": 3,
            "required": true,
            "type": "integer"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "(fullName,comments,rating,createdAt)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Reviews Fetched Successfully",
            "schema": {
              "$ref": "#/definitions/reviewsList200"
            }
          },
          "401": {
            "description": "No data found",
            "schema": {
              "$ref": "#/definitions/reviewsList401"
            }
          },
          "500": {
            "description": "Internal Server error- Cannot save user",
            "schema": {
              "$ref": "#/definitions/getProvider500"
            }
          }
        }
      }
    },
    "/api/v1/admin/registerAdmin": {
      "post": {
        "tags": [
          "Super Admin"
        ],
        "description": "Register Admin",
        "operationId": "Register Admin",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "access_token",
            "in": "header",
            "description": "access token",
            "required": true,
            "type": "string"
          },
          {
            "name": "email",
            "in": "formData",
            "description": "email",
            "required": true,
            "type": "string"
          },
          {
            "name": "password",
            "in": "formData",
            "description": "password",
            "required": true,
            "type": "string",
            "default": "123456"
          },
          {
            "name": "firstName",
            "in": "formData",
            "description": "First Name",
            "required": true,
            "type": "string",
            "default": "Demo"
          },
          {
            "name": "lastName",
            "in": "formData",
            "description": "Last Name",
            "required": true,
            "type": "string",
            "default": "Demo"
          },
          {
            "name": "dateOfBirth",
            "in": "formData",
            "description": "date of birth",
            "required": true,
            "type": "string",
            "default": "Demo"
          },
          {
            "name": "telephone",
            "in": "formData",
            "description": "telephone",
            "required": true,
            "type": "string",
            "default": "Demo"
          }
        ],
        "responses": {
          "200": {
            "description": "Admin successfully created",
            "schema": {
              "$ref": "#/definitions/registerAdmin200"
            }
          },
          "400": {
            "description": "Admin cannot be added/Unauthorized access",
            "schema": {
              "$ref": "#/definitions/registerAdmin400"
            }
          },
          "409": {
            "description": "Admin already exists",
            "schema": {
              "$ref": "#/definitions/registerAdmin409"
            }
          },
          "500": {
            "description": "Something went wrong",
            "schema": {
              "$ref": "#/definitions/makePayment500"
            }
          }
        }
      }
    },
    "/api/v1/admin/getAllAdminDetails": {
      "get": {
        "tags": [
          "Super Admin"
        ],
        "description": "Admin List",
        "operationId": "Admin List",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "access_token",
            "in": "header",
            "description": "access token",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page Number min 1",
            "default": "1",
            "required": true,
            "type": "integer"
          },
          {
            "name": "query",
            "in": "query",
            "description": "Search Query",
            "default": "",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "(email)",
            "default": "email",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "asc or desc",
            "default": "asc",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Admin successfully created",
            "schema": {
              "$ref": "#/definitions/registerAdmin200"
            }
          },
          "400": {
            "description": "Admin cannot be added/Unauthorized access",
            "schema": {
              "$ref": "#/definitions/registerAdmin400"
            }
          },
          "409": {
            "description": "Admin already exists",
            "schema": {
              "$ref": "#/definitions/registerAdmin409"
            }
          },
          "500": {
            "description": "Something went wrong",
            "schema": {
              "$ref": "#/definitions/makePayment500"
            }
          }
        }
      }
    },
    "/api/v1/admin/updateAdmin": {
      "put": {
        "tags": [
          "Super Admin"
        ],
        "description": "Update Admin",
        "operationId": "Update Admin",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "access_token",
            "in": "header",
            "description": "access token",
            "required": true,
            "type": "string"
          },
          {
            "name": "firstName",
            "in": "formData",
            "description": "First Name",
            "required": true,
            "type": "string",
            "default": "Demo"
          },
          {
            "name": "lastName",
            "in": "formData",
            "description": "Last Name",
            "required": true,
            "type": "string",
            "default": "Demo"
          },
          {
            "name": "dateOfBirth",
            "in": "formData",
            "description": "date of birth",
            "required": true,
            "type": "string",
            "default": "Demo"
          },
          {
            "name": "telephone",
            "in": "formData",
            "description": "telephone",
            "required": true,
            "type": "string",
            "default": "Demo"
          },
          {
            "name": "id",
            "in": "formData",
            "description": "user_id",
            "required": true,
            "type": "string",
            "default": "Demo"
          }
        ],
        "responses": {
          "200": {
            "description": "Admin successfully updated",
            "schema": {
              "$ref": "#/definitions/updateAdmin200"
            }
          },
          "400": {
            "description": "Admin cannot be updated",
            "schema": {
              "$ref": "#/definitions/updateAdmin400"
            }
          },
          "500": {
            "description": "Something went wrong",
            "schema": {
              "$ref": "#/definitions/updateAdmin500"
            }
          }
        }
      }
    },
    "/api/v1/admin/deleteAdmin/{id}": {
      "delete": {
        "tags": [
          "Super Admin"
        ],
        "description": "Delete Admin",
        "operationId": "Delete Admin",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "access_token",
            "in": "header",
            "description": "access token",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "user_id",
            "required": true,
            "type": "integer",
            "default": "Demo"
          }
        ],
        "responses": {
          "200": {
            "description": "Admin successfully updated",
            "schema": {
              "$ref": "#/definitions/deleteAdmin200"
            }
          },
          "400": {
            "description": "Admin cannot be updated",
            "schema": {
              "$ref": "#/definitions/deleteAdmin400"
            }
          },
          "500": {
            "description": "Something went wrong",
            "schema": {
              "$ref": "#/definitions/deleteAdmin500"
            }
          }
        }
      }
    },
    "/api/v1/admin/getAdmin/{id}": {
      "get": {
        "tags": [
          "Super Admin"
        ],
        "description": "get Admin",
        "operationId": "get Admin",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "access_token",
            "in": "header",
            "description": "access token",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "user_id",
            "required": true,
            "type": "integer",
            "default": "Demo"
          }
        ],
        "responses": {
          "200": {
            "description": "Admin data fetched successfully",
            "schema": {
              "$ref": "#/definitions/getAdmin200"
            }
          },
          "400": {
            "description": "No such admin found",
            "schema": {
              "$ref": "#/definitions/getAdmin400"
            }
          },
          "500": {
            "description": "Something went wrong",
            "schema": {
              "$ref": "#/definitions/deleteAdmin500"
            }
          }
        }
      }
    },
    "/api/v1/admin/updateAdminStatus": {
      "post": {
        "tags": [
          "Super Admin"
        ],
        "description": "Update Admin Status",
        "operationId": "Update Admin Status",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "access_token",
            "in": "header",
            "description": "access token",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "formData",
            "description": "user_id",
            "required": true,
            "type": "string",
            "default": "Demo"
          }
        ],
        "responses": {
          "200": {
            "description": "Admin successfully updated",
            "schema": {
              "$ref": "#/definitions/updateAdminStatus200"
            }
          },
          "400": {
            "description": "Admin cannot be updated",
            "schema": {
              "$ref": "#/definitions/updateAdminStatus400"
            }
          },
          "500": {
            "description": "Something went wrong",
            "schema": {
              "$ref": "#/definitions/updateAdminStatus500"
            }
          }
        }
      }
    },
    "/api/v1/getPaymentDetails": {
      "get": {
        "tags": [
          "Patient"
        ],
        "description": "get payment details",
        "operationId": "get payment details",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "access_token",
            "in": "header",
            "description": "access token",
            "required": true,
            "type": "string"
          },
          {
            "name": "promoCode",
            "in": "query",
            "description": "Promo Code id",
            "default": "GIVE50",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "PromoCode Successfully Updated",
            "schema": {
              "$ref": "#/definitions/getPaymentDetails200"
            }
          },
          "409": {
            "description": "Cannot fetch appointment information for particular user",
            "schema": {
              "$ref": "#/definitions/getPaymentDetails409"
            }
          },
          "500": {
            "description": "Something went wrong",
            "schema": {
              "$ref": "#/definitions/getPaymentDetails500"
            }
          }
        }
      }
    },
    "/api/v1/makePayment": {
      "post": {
        "tags": [
          "Patient"
        ],
        "description": "Make payment for appointment",
        "operationId": "Make payment for appointment",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "access_token",
            "in": "header",
            "description": "access token",
            "required": true,
            "type": "string"
          },
          {
            "name": "creditCardId",
            "in": "formData",
            "description": "Credit card Id if payment by credit card",
            "required": false,
            "type": "string"
          },
          {
            "name": "paymentMode",
            "in": "formData",
            "description": "Payment mode ex (creditCard, payPal, applePay, googlePay)",
            "required": true,
            "type": "string",
            "default": "creditCard"
          }
        ],
        "responses": {
          "200": {
            "description": "Confirmation email and SMS has been sent to your registered details.",
            "schema": {
              "$ref": "#/definitions/makePayment200"
            }
          },
          "400": {
            "description": "Unable to book appointment",
            "schema": {
              "$ref": "#/definitions/makePayment400"
            }
          },
          "500": {
            "description": "Something went wrong",
            "schema": {
              "$ref": "#/definitions/makePayment500"
            }
          }
        }
      }
    },
    "/api/v1/getAppointmentApprovalStatus": {
      "get": {
        "tags": [
          "Patient"
        ],
        "description": "Get Consult now approval status",
        "operationId": "Get Consult now approval status",
        "produces": [
          "application/json"
        ],
        "parameters": [{
          "name": "access_token",
          "in": "header",
          "description": "access token",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "Appointment Approved/ Pending/ Rejected",
            "schema": {
              "$ref": "#/definitions/getAppointmentApprovalStatus200"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/getAppointmentApprovalStatus500"
            }
          }
        }
      }
    },
    "/api/v1/getPatientVisitDetails": {
      "get": {
        "tags": [
          "Patient"
        ],
        "description": "Get Visit Details",
        "operationId": "Get Visit Details",
        "produces": [
          "application/json"
        ],
        "parameters": [{
          "name": "access_token",
          "in": "header",
          "description": "access token",
          "required": true,
          "type": "string"
        }, {
          "name": "appointmentId",
          "in": "query",
          "description": "Appointment Id",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "Details Fetched Successfully",
            "schema": {
              "$ref": "#/definitions/getPatientVisitDetails200"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/getPatientVisitDetails500"
            }
          }
        }
      }
    },
    "/api/v1/saveAppointmentApprovalStatus": {
      "post": {
        "tags": [
          "Provider"
        ],
        "description": "Save provider consult now approval status",
        "operationId": "Save provider consult now approval status",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "access_token",
            "in": "header",
            "description": "access token",
            "required": true,
            "type": "string"
          },
          {
            "name": "status",
            "in": "formData",
            "description": "Status accepted or not (2 - for rejected/1- accepted )",
            "default": "1",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Appointment Approved",
            "schema": {
              "$ref": "#/definitions/saveAppointmentApprovalStatus200"
            }
          },
          "403": {
            "description": "Un-authorized access",
            "schema": {
              "$ref": "#/definitions/saveAppointmentApprovalStatus403"
            }
          },
          "500": {
            "description": "Something went wrong",
            "schema": {
              "$ref": "#/definitions/saveAppointmentApprovalStatus500"
            }
          }
        }
      }
    },
    "/api/v1/cancelConsultNow": {
      "delete": {
        "tags": [
          "Patient"
        ],
        "description": "Cancel Consult Now",
        "operationId": "Cancel Consult Now",
        "produces": [
          "application/json"
        ],
        "parameters": [{
          "name": "access_token",
          "in": "header",
          "description": "access token",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "Consult Successfully Cancelled",
            "schema": {
              "$ref": "#/definitions/cancelConsultNow200"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/cancelConsultNow500"
            }
          }
        }
      }
    },
    "/api/v1/updateMedicalChart": {
      "post": {
        "tags": [
          "Provider"
        ],
        "description": "Update Medical Chart for Appointment",
        "operationId": "Update Medical Chart for Appointment",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "access_token",
            "in": "header",
            "description": "access token",
            "required": true,
            "type": "string"
          },
          {
            "name": "appointmentId",
            "in": "formData",
            "description": "Appointment Id",
            "required": true,
            "type": "string"
          },
          {
            "name": "historyPresentIllness",
            "in": "formData",
            "description": "historyPresentIllness Id",
            "type": "string"
          },
          {
            "name": "prescription",
            "in": "formData",
            "description": "prescription Id",
            "type": "string"
          },
          {
            "name": "pharmacy",
            "in": "formData",
            "description": "pharmacy Id",
            "type": "string"
          },
          {
            "name": "labsOrdered",
            "in": "formData",
            "description": "labsOrdered Id",
            "type": "string"
          },
          {
            "name": "medicalHistory",
            "in": "formData",
            "description": "medicalHistory Id",
            "type": "string"
          },
          {
            "name": "reviewsSymptoms",
            "in": "formData",
            "description": "reviewsSymptoms Id",
            "type": "string"
          },
          {
            "name": "examsVisual",
            "in": "formData",
            "description": "examsVisual Id",
            "type": "string"
          },
          {
            "name": "dischargeInstruction",
            "in": "formData",
            "description": "dischargeInstruction Id",
            "type": "string"
          },
          {
            "name": "chiefComplaint",
            "in": "formData",
            "description": "chiefComplaint",
            "type": "string"
          },
          {
            "name": "allergies",
            "in": "formData",
            "description": "allergies Id",
            "type": "string"
          },
          {
            "name": "cptCode",
            "in": "formData",
            "description": "cptCode Id",
            "type": "string"
          },
          {
            "name": "icdCode",
            "in": "formData",
            "description": "icdCode Id",
            "type": "string"
          },
          {
            "name": "teleHealthCode",
            "in": "formData",
            "description": "Telehelth Id",
            "type": "string"
          },
          {
            "name": "notes",
            "in": "formData",
            "description": "notes",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Medical Chart Successfully Updated",
            "schema": {
              "$ref": "#/definitions/updateMedicalChart200"
            }
          },
          "404": {
            "description": "Appointment not found",
            "schema": {
              "$ref": "#/definitions/updateMedicalChart404"
            }
          },
          "500": {
            "description": "Something went wrong",
            "schema": {
              "$ref": "#/definitions/updateMedicalChart500"
            }
          }
        }
      }
    },
    "/api/v1/getMedicalChart": {
      "get": {
        "tags": [
          "Provider"
        ],
        "description": "Get Medical Chart for Appointment",
        "operationId": "Get Medical Chart for Appointment",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "access_token",
            "in": "header",
            "description": "access token",
            "required": true,
            "type": "string"
          },
          {
            "name": "appointmentId",
            "in": "query",
            "description": "Appointment Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Medical Chart Successfully Fetched",
            "schema": {
              "$ref": "#/definitions/getMedicalChart200"
            }
          },
          "500": {
            "description": "Something went wrong",
            "schema": {
              "$ref": "#/definitions/getMedicalChart500"
            }
          }
        }
      }
    },
    "/api/v1/updatePrescription": {
      "post": {
        "tags": [
          "Provider"
        ],
        "description": "Update Prescription",
        "operationId": "Update Prescription",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "access_token",
            "in": "header",
            "description": "access token",
            "required": true,
            "type": "string"
          },
          {
            "name": "appointmentId",
            "in": "formData",
            "description": "Appointment Id",
            "required": true,
            "type": "string"
          },
          {
            "name": "prescriptions",
            "in": "formData",
            "description": "prescriptions",
            "required": false,
            "type": "text"
          },
          {
            "name": "pharmacy",
            "in": "formData",
            "description": "pharmacy",
            "required": false,
            "type": "text"
          },
          {
            "name": "labOrdered",
            "in": "formData",
            "description": "labOrdered",
            "required": false,
            "type": "text"
          }
        ],
        "responses": {
          "200": {
            "description": "Prescriptions Successfully Updated",
            "schema": {
              "$ref": "#/definitions/updatePrescription200"
            }
          },
          "500": {
            "description": "Something went wrong",
            "schema": {
              "$ref": "#/definitions/updatePrescription500"
            }
          }
        }
      }
    },
    "/api/v1/admin/getAppointmentsList": {
      "get": {
        "tags": [
          "Admin"
        ],
        "description": "Get appointment list",
        "operationId": "Get appointment list",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "access_token",
            "in": "header",
            "description": "access token",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page Number min 1",
            "default": "1",
            "required": true,
            "type": "integer"
          },
          {
            "name": "query",
            "in": "query",
            "description": "Search Query",
            "default": "",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "(profider_full_name,patient_full_name,isPaid,isActive)",
            "default": "profider_full_name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "asc or desc",
            "default": "asc",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Patient/Child Id",
            "default": "0",
            "required": true,
            "type": "integer"
          }          
        ],
        "responses": {
          "200": {
            "description": "Appointments fetched successfully",
            "schema": {
              "$ref": "#/definitions/getAppointmentsList200"
            }
          },
          "500": {
            "description": "Something went wrong",
            "schema": {
              "$ref": "#/definitions/getAppointmentsList500"
            }
          }
        }
      }
    },
    "/api/v1/admin/notificationList": {
      "get": {
        "tags": [
          "Admin"
        ],
        "description": "get notification list",
        "operationId": "get notification list",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "access_token",
            "in": "header",
            "description": "access token",
            "required": true,
            "type": "string"
          },
          {
            "name": "userType",
            "in": "query",
            "description": "Type of user i.e 3 for Patients or 4 for Providers",
            "default": 3,
            "required": true,
            "type": "integer"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page Number min 1",
            "default": "1",
            "required": true,
            "type": "integer"
          },
          {
            "name": "query",
            "in": "query",
            "description": "Search Query",
            "default": "",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "(notification,notificationType,title,message,createdAt,id)",
            "default": "id",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "asc or desc",
            "default": "asc",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Notification Fetched Successfully",
            "schema": {
              "$ref": "#/definitions/adminNotificationList200"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/adminNotificationList500"
            }
          }
        }
      }
    },
    "/api/v1/admin/exportPatientList": {
      "get": {
        "tags": [
          "Admin"
        ],
        "description": "export patient list",
        "operationId": "export patient list",
        "produces": [
          "application/json"
        ],
        "parameters": [{
          "name": "access_token",
          "in": "header",
          "description": "access token",
          "required": true,
          "type": "string"
        }]
      }
    },
    "/api/v1/admin/exportAppointmentList": {
      "get": {
        "tags": [
          "Admin"
        ],
        "description": "export Appointment list",
        "operationId": "export Appointment list",
        "produces": [
          "application/json"
        ],
        "parameters": [{
          "name": "access_token",
          "in": "header",
          "description": "access token",
          "required": true,
          "type": "string"
        }]
      }
    },
    "/api/v1/admin/exportReviewsList/{userType}": {
      "get": {
        "tags": [
          "Admin"
        ],
        "description": "export Reviews list",
        "operationId": "export Reviews list",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
          "name": "access_token",
          "in": "header",
          "description": "access token",
          "required": true,
          "type": "string"
        },
        {
          "name": "userType",
          "in": "header",
          "description": "3 for patients 4 for provider",
          "required": true,
          "type": "integer"
        }
      ]
      }
    },
    "/api/v1/admin/exportPromoCodeCSV": {
      "get": {
        "tags": [
          "Admin"
        ],
        "description": "export Promo code list",
        "operationId": "export Promo code list",
        "produces": [
          "application/json"
        ],
        "parameters": [{
          "name": "access_token",
          "in": "header",
          "description": "access token",
          "required": true,
          "type": "string"
        }]
      }
    },
    "/api/v1/admin/exportProviderList": {
      "get": {
        "tags": [
          "Admin"
        ],
        "description": "export provider list",
        "operationId": "export provider list",
        "produces": [
          "application/json"
        ],
        "parameters": [{
          "name": "access_token",
          "in": "header",
          "description": "access token",
          "required": true,
          "type": "string"
        }]
      }
    },
    "/api/v1/admin/getAppointment/{id}": {
      "get": {
        "tags": [
          "Admin"
        ],
        "description": "Get appointment",
        "operationId": "Get appointment",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "access_token",
            "in": "header",
            "description": "access token",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Appointment id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Appointment fetched successfully",
            "schema": {
              "$ref": "#/definitions/getAppointment200"
            }
          },
          "500": {
            "description": "Something went wrong",
            "schema": {
              "$ref": "#/definitions/getAppointment500"
            }
          }
        }
      }
    },
    "/api/v1/getLabResults": {
      "get": {
        "tags": [
          "Patient"
        ],
        "description": "Get Lab Results",
        "operationId": "Get Lab Results",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "access_token",
            "in": "header",
            "description": "access token",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "query",
            "description": "AppointmentId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "getLabResults Fetched successfully",
            "schema": {
              "$ref": "#/definitions/getlabResults200"
            }
          },
          "500": {
            "description": "Something went wrong",
            "schema": {
              "$ref": "#/definitions/getlabResults500"
            }
          }
        }
      }
    },
    "/api/v1/updateLabResults": {
      "put": {
        "tags": [
          "Patient"
        ],
        "description": "Update Lab Result",
        "operationId": "Update Lab Result",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "access_token",
            "in": "header",
            "description": "access token",
            "required": true,
            "type": "string"
          },
          {
            "name": "appointmentId",
            "in": "formData",
            "description": "appointmentId",
            "required": true,
            "type": "string"
          },
          {
            "name": "notes",
            "in": "formData",
            "description": "notes given",
            "required": false,
            "type": "string"
          },
          {
            "name": "fileDescription",
            "in": "formData",
            "description": "[1564669573579.png]",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "LabResult saved successfully",
            "schema": {
              "$ref": "#/definitions/updateLabResults200"
            }
          },
          "500": {
            "description": "Something went wrong",
            "schema": {
              "$ref": "#/definitions/updateLabResults500"
            }
          }
        }
      }
    },
    "/api/v1/admin/getUsersByPromoCode": {
      "get": {
        "tags": [
          "Admin"
        ],
        "description": "getUsersByPromoCode",
        "operationId": "getUsersByPromoCode",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "access_token",
            "in": "header",
            "description": "access token",
            "required": true,
            "type": "string"
          },
          {
            "name": "promoCodeId",
            "in": "query",
            "description": "promoCodeId",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "page number",
            "required": true,
            "type": "number",
            "default": 1
          },
          {
            "name": "query",
            "in": "query",
            "description": "Search By Name",
            "type": "string",
            "default": ""
          }
        ],
        "responses": {
          "200": {
            "description": "Notification Fetched Successfully",
            "schema": {
              "$ref": "#/definitions/getUsersByPromoCode200"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/getUsersByPromoCode500"
            }
          }
        }
      }
    },
    "/api/v1/admin/getUserDetail/{id}": {
      "get": {
        "tags": [
          "Admin"
        ],
        "description": "Get User Detail",
        "operationId": "Get User Detail",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "access_token",
            "in": "header",
            "description": "access token",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "User found",
            "schema": {
              "$ref": "#/definitions/getUserDetail200"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/getUserDetail200"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/getUserDetail500"
            }
          }
        }
      }
    },
    "/api/v1/completeVideoCall": {
      "put": {
        "tags": [
          "Admin"
        ],
        "description": "Complete Video Call",
        "operationId": "Complete Video Call",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "access_token",
            "in": "header",
            "description": "access token",
            "required": true,
            "type": "string"
          },
          {
            "name": "appointmentId",
            "in": "query",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "User found",
            "schema": {
              "$ref": "#/definitions/completeVideoCall200"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/completeVideoCall500"
            }
          }
        }
      }
    },
    "/api/v1/saveChild": {
      "post": {
        "tags": [
          "Child"
        ],
        "description": "Save Child",
        "operationId": "Save Child",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "access_token",
            "in": "header",
            "description": "access_token",
            "type": "string",
            "required": true
          },
          {
            "name": "firstName",
            "in": "formData",
            "description": "First Name",
            "required": true,
            "type": "string",
            "default": "Anil"
          }, {
            "name": "lastName",
            "in": "formData",
            "description": "Last Name",
            "required": true,
            "type": "string",
            "default": "Singh"
          }, {
            "name": "dateOfBirth",
            "in": "formData",
            "description": "Child date of birth",
            "required": true,
            "type": "string",
            "default": "2019-07-29"
          },
          {
            "name": "gender",
            "in": "formData",
            "description": "User gender (eg: 1/2/3/4)",
            "required": true,
            "type": "integer",
            "default": "1"
          },
          {
            "name": "childId",
            "in": "formData",
            "description": "Child Id for updating record",
            "type": "integer" 
          },
          {
            "name": "fileDescription",
            "in": "formData", 
            "description": "file description of uploaded file ex. [\"1542451274.jpg\"]",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Child data is saved successfully.",
            "schema": {
              "$ref": "#/definitions/saveChild200"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/saveChild500"
            }
          }
        }
      }
    },
    "/api/v1/getChildList": {
      "get": {
        "tags": [
          "Child"
        ],
        "description": "Get Child List",
        "operationId": "Get Child List",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "access_token",
            "in": "header",
            "description": "access token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Children List",
            "schema": {
              "$ref": "#/definitions/getChildList200"
            }
          },
          "500": {
            "description": "Something went wrong",
            "schema": {
              "$ref": "#/definitions/getChildList500"
            }
          }
        }
      }
    },
    "/api/v1/getChildDetails/{childId}": {
      "get": {
        "tags": [
          "Child"
        ],
        "description": "Get Child Detail",
        "operationId": "Get Child Detail",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "access_token",
            "in": "header",
            "description": "access token",
            "required": true,
            "type": "string"
          },
          {
            "name": "childId",
            "in": "path",
            "description": "Child Id",
            "required": true,
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "Child found",
            "schema": {
              "$ref": "#/definitions/getChildDetails200"
            }
          },
          "404": {
            "description": "Child Not found",
            "schema": {
              "$ref": "#/definitions/getChildDetails404"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/getChildDetails500"
            }
          }
        }
      }
    }    
  },
  "definitions": {
    "patient200": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "200"
        },
        "message": {
          "type": "string",
          "example": "Patient created successfully"
        }
      }
    },
    "patient400": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "400"
        },
        "message": {
          "type": "string",
          "example": "Patient Email Already Used"
        }
      }
    },
    "patient500": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "500"
        },
        "message": {
          "type": "string",
          "example": "Internal Server error- Cannot save user"
        }
      }
    },
    "allergy200": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "200"
        },
        "message": {
          "type": "string",
          "example": "Allergies and Hx added"
        },
        "data": {
          "type": "object",
          "example": {
            "medicalCondition": "Test,Test2,Test3",
            "allergies": {
              "medicationAllergies": "1,2,4",
              "otherAllergies": "a,b"
            },
            "medications": "Test,Test2,Test3"
          }
        }
      }
    },
    "allergy409": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "409"
        },
        "message": {
          "type": "string",
          "example": "No such user found"
        }
      }
    },
    "allergy500": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "500"
        },
        "message": {
          "type": "string",
          "example": "Internal Server error- Cannot save allergy & Hx"
        }
      }
    },
    "insurance200": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "200"
        },
        "message": {
          "type": "string",
          "example": "Insurance added"
        },
        "data": {
          "type": "object",
          "example": {
            "isInsuranceVerified": 0,
            "insuranceNumber": "123456",
            "insuranceVerifiedBy": 1,
            "insuranceVerifiedOn": "2018-05-03T00:00:00.000Z",
            "insuranceCompanyName": "kaiser Foundation Group",
            "policyHolderName": "demo",
            "groupId": "123456",
            "memberId": "123456",
            "insuranceImages": []
          }
        }
      }
    },
    "insurance409": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "409"
        },
        "message": {
          "type": "string",
          "example": "MemberId or insuranceId already exists"
        }
      }
    },
    "insurance500": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "500"
        },
        "message": {
          "type": "string",
          "example": "Internal Server error- Cannot save Insurance"
        }
      }
    },
    "updateProfile200": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "200"
        },
        "message": {
          "type": "string",
          "example": "Address successfully saved"
        },
        "data": {
          "type": "object",
          "example": {
            "profile": {
              "email": "test23@mobikasa.com",
              "role": 3,
              "quickBloxId": "97631532",
              "createdTimeSpan": "1568959078890",
              "braintreeCustomerId": null,
              "countryCode": "+1",
              "telephone": "1212111111",
              "firstName": "test23",
              "lastName": "singh",
              "dateOfBirth": "2019-07-29",
              "gender": 1,
              "clinicCode": "45",
              "updatedTelephoneCountryCode": null,
              "updatedTelephone": null,
              "updatedTelephoneVerified": 0,
              "city": 1,
              "state": 1,
              "zipCode": "208020",
              "address": "Mobikasa,Ghitorni",
              "country": 1,
              "profileImage": "http://localhost/public/common/patient.png"
            },
            "insuranceData": {
              "isInsuranceVerified": 0,
              "insuranceNumber": "123456",
              "insuranceEndDate": null,
              "insuranceVerifiedBy": 1,
              "insuranceVerifiedOn": "2018-05-03T00:00:00.000Z",
              "insuranceCompanyName": "kaiser Foundation Group",
              "policyHolderName": "demo",
              "groupId": "123456",
              "memberId": "123456",
              "insuranceImages": []
            },
            "pharmacy": {
              "pharmacyName": "abc",
              "pharmacyAddress": "abc",
              "pharmacyPhone": "123456789"
            },
            "labs": {
              "labName": "abc",
              "labAddress": "abc",
              "labPhone": "1234567890"
            },
            "allergiesMedication": {
              "medicalCondition": [
                "Test",
                "Test2",
                "Test3"
              ],
              "allergies": {
                "medicationAllergies": [
                  "1",
                  "2",
                  "4"
                ],
                "otherAllergies": [
                  "a",
                  "b"
                ]
              },
              "medications": [
                "Test",
                "Test2",
                "Test3"
              ]
            }
          }
        }
      }
    },
    "updateProfile400": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "400"
        },
        "message": {
          "type": "string",
          "example": "Token Expired"
        }
      }
    },
    "updateProfile500": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "500"
        },
        "message": {
          "type": "string",
          "example": "Internal Server error- Something Went Wrong"
        }
      }
    },
    "verifyResetToken200": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "200"
        },
        "message": {
          "type": "string",
          "example": "Token Verified"
        }
      }
    },
    "verifyResetToken401": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "401"
        },
        "message": {
          "type": "string",
          "example": "Token Expired"
        }
      }
    },
    "verifyResetToken403": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "403"
        },
        "message": {
          "type": "string",
          "example": "Unothorised"
        }
      }
    },
    "verifyResetToken500": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "500"
        },
        "message": {
          "type": "string",
          "example": "Something Went Wrong"
        }
      }
    },
    "resetPassword200": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "200"
        },
        "message": {
          "type": "string",
          "example": "Password Updated"
        }
      }
    },
    "resetPassword401": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "401"
        },
        "message": {
          "type": "string",
          "example": "Token Expired"
        }
      }
    },
    "resetPassword400": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "400"
        },
        "message": {
          "type": "string",
          "example": "Reset link expired"
        }
      }
    },
    "resetPassword500": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "500"
        },
        "message": {
          "type": "string",
          "example": "Something Went Wrong"
        }
      }
    },
    "forgotPassword200": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "200"
        },
        "message": {
          "type": "string",
          "example": "Please follow email sent to you"
        }
      }
    },
    "forgotPassword401": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "401"
        },
        "message": {
          "type": "string",
          "example": "User not found"
        }
      }
    },
    "forgotPassword500": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "500"
        },
        "message": {
          "type": "string",
          "example": "Something Went Wrong"
        }
      }
    },
    "getOTP200": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "405"
        },
        "message": {
          "type": "string",
          "example": "OTP sent to device"
        }
      }
    },
    "getOTP409": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "409"
        },
        "message": {
          "type": "string",
          "example": "Telephone already exists"
        }
      }
    },
    "getOTP500": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "500"
        },
        "message": {
          "type": "string",
          "example": "Something Went Wrong"
        }
      }
    },
    "verifyOTP200": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "200"
        },
        "message": {
          "type": "string",
          "example": "OTP  verified/OTP already verified"
        },
        "data": {
          "type": "object",
          "example": {
            "profile": {
              "email": "test23@mobikasa.com",
              "role": 3,
              "quickBloxId": null,
              "createdTimeSpan": "1568959078890",
              "braintreeCustomerId": null,
              "countryCode": "+1",
              "telephone": "1212111111",
              "firstName": "test23",
              "lastName": "singh",
              "dateOfBirth": null,
              "gender": 3,
              "clinicCode": null,
              "city": 0,
              "state": 0,
              "zipCode": "",
              "address": "",
              "country": 0,
              "profileImage": "http://localhost/public/common/patient.png"
            },
            "insuranceData": {
              "insuranceImages": []
            },
            "pharmacy": {
              "pharmacyName": null,
              "pharmacyAddress": null,
              "pharmacyPhone": null
            },
            "labs": {
              "labName": null,
              "labAddress": null,
              "labPhone": null
            },
            "allergiesMedication": {
              "medicalCondition": [],
              "allergies": {
                "medicationAllergies": [],
                "otherAllergies": []
              },
              "medications": []
            }
          }
        }
      }
    },
    "verifyOTP400": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "400"
        },
        "message": {
          "type": "string",
          "example": "OTP not valid"
        }
      }
    },
    "verifyOTP409": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "409"
        },
        "message": {
          "type": "string",
          "example": "Telephone already used"
        }
      }
    },
    "verifyOTP401": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "401"
        },
        "message": {
          "type": "string",
          "example": "No user found"
        }
      }
    },
    "verifyOTP500": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "500"
        },
        "message": {
          "type": "string",
          "example": "Something Went Wrong"
        }
      }
    },
    "uploadProfilePhoto200": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "200"
        },
        "data": {
          "type": "string",
          "example": "1515151515.png"
        },
        "message": {
          "type": "string",
          "example": "Successfully Uploaded"
        }
      }
    },
    "uploadProfilePhoto400": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "400"
        },
        "message": {
          "type": "string",
          "example": "Please upload an image/Please upload only these types"
        }
      }
    },
    "uploadProfilePhoto500": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "500"
        },
        "message": {
          "type": "string",
          "example": "Cannot Upload File To Server error"
        }
      }
    },
    "saveFileType200": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "200"
        },
        "message": {
          "type": "string",
          "example": "Successfully Uploaded"
        }
      }
    },
    "saveFileType500": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "500"
        },
        "message": {
          "type": "string",
          "example": "Error in saving type"
        }
      }
    },
    "createProvider200": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "200"
        },
        "message": {
          "type": "string",
          "example": "Provider created successfully"
        }
      }
    },
    "createProvider409": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "409"
        },
        "message": {
          "type": "string",
          "example": "Provider already exists"
        }
      }
    },
    "createProvider500": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "500"
        },
        "message": {
          "type": "string",
          "example": "Internal Server error- Cannot create provider"
        }
      }
    },
    "updateProvider200": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "200"
        },
        "message": {
          "type": "string",
          "example": "Provider updated successfully"
        }
      }
    },
    "updateProvider409": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "409"
        },
        "message": {
          "type": "string",
          "example": "Provider email already exists"
        }
      }
    },
    "updateProvider500": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "500"
        },
        "message": {
          "type": "string",
          "example": "Internal Server error- Cannot update provider"
        }
      }
    },
    "pharmacy200": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "200"
        },
        "message": {
          "type": "string",
          "example": "Pharmacy or labs added"
        },
        "data": {
          "type": "object",
          "example": {
            "pharmacy": {
              "pharmacyName": "abc",
              "pharmacyAddress": "abc",
              "pharmacyPhone": "123456789"
            },
            "labs": {
              "labName": "abc",
              "labAddress": "abc",
              "labPhone": "1234567890"
            }
          }
        }
      }
    },
    "pharmacy401": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "500"
        },
        "message": {
          "type": "string",
          "example": "No such user found"
        }
      }
    },
    "pharmacy500": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "500"
        },
        "message": {
          "type": "string",
          "example": "Something Went Wrong"
        }
      }
    },
    "common200": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "200"
        },
        "message": {
          "type": "string",
          "example": "Data found"
        },
        "data": {
          "type": "object",
          "example": {
            "gender": [{
                "id": 1,
                "name": "Male"
              },
              {
                "id": 2,
                "name": "Female"
              },
              {
                "id": 3,
                "name": "Other"
              },
              {
                "id": 4,
                "name": "Not Specified"
              }
            ],
            "status": [{
                "id": 0,
                "name": "pending"
              },
              {
                "id": 1,
                "name": "active"
              },
              {
                "id": 2,
                "name": "blocked"
              },
              {
                "id": 3,
                "name": "deactive"
              }
            ],
            "role": [{
                "id": 1,
                "name": "superadmin"
              },
              {
                "id": 2,
                "name": "admin"
              },
              {
                "id": 3,
                "name": "patient"
              },
              {
                "id": 4,
                "name": "provider"
              }
            ],
            "privacy_policy_link": "https://knownowapp.mobikasa.net/api/v1/docs",
            "terms_and_conditions_link": "https://knownowapp.mobikasa.net/api/v1/docs",
            "countries": [{
              "id": 1,
              "name": "United States"
            }]
          }
        }
      }
    },
    "addFavorite200": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "200"
        },
        "message": {
          "type": "string",
          "example": "Favourite added successfully"
        },
        "data": {
          "type": "object",
          "example": {
            "id": 10,
            "userId": 54,
            "favoriteId": "14",
            "updatedAt": "2019-09-20T06:26:31.042Z",
            "createdAt": "2019-09-20T06:26:31.042Z"
          }
        }
      }
    },
    "addFavorite409": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "409"
        },
        "message": {
          "type": "string",
          "example": "Favourite already exist"
        }
      }
    },
    "addFavorite401": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "401"
        },
        "message": {
          "type": "string",
          "example": "Favourite not exist"
        }
      }
    },
    "addFavorite500": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "500"
        },
        "message": {
          "type": "string",
          "example": "Something went wrong"
        }
      }
    },
    "removeFavorite200": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "200"
        },
        "message": {
          "type": "string",
          "example": "Favourite successfully deleted"
        }
      }
    },
    "removeFavorite401": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "401"
        },
        "message": {
          "type": "string",
          "example": "Favourite not exist"
        }
      }
    },
    "removeFavorite500": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "500"
        },
        "message": {
          "type": "string",
          "example": "Something went wrong"
        }
      }
    },
    "listFavoriteProviders200": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "200"
        },
        "message": {
          "type": "string",
          "example": "Favourite Fetched Successfully"
        },
        "data": {
          "type": "object",
          "example": {
            "totalRecords": 0,
            "recordPerPage": 10,
            "currentPage": 1,
            "result": [{
              "favId": 5,
              "id": 14,
              "firstName": "demo",
              "lastName": "demo",
              "specilization": "test",
              "languageSpeaks": "English, German, French",
              "bio": "test",
              "isAvailable": 0,
              "profileImage": "http://localhost/assets/uploads/1568450119055/1568631045980.png",
              "profileThumbImage": "http://localhost/assets/uploads/thumb_1568450119055/1568631045980.png"
            }]
          }
        }
      }
    },
    "listFavoriteProviders500": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "500"
        },
        "message": {
          "type": "string",
          "example": "Internal Server error- Cannot Fetch Favorites"
        }
      }
    },
    "getAllPatientDetails200": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "200"
        },
        "message": {
          "type": "string",
          "example": "Patient List Fetched Successfully"
        }
      }
    },
    "getAllPatientDetails500": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "500"
        },
        "message": {
          "type": "string",
          "example": "Internal Server error- Cannot Fetch Patient"
        }
      }
    },
    "deletePatient200": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "200"
        },
        "message": {
          "type": "string",
          "example": "Patient successfully deleted"
        }
      }
    },
    "deletePatient401": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "401"
        },
        "message": {
          "type": "string",
          "example": "User does not exists"
        }
      }
    },
    "deletePatient500": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "401"
        },
        "message": {
          "type": "string",
          "example": "Something went wrong"
        }
      }
    },
    "getPatient200": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "200"
        },
        "message": {
          "type": "string",
          "example": "Patient found"
        }
      }
    },
    "getPatient404": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "404"
        },
        "message": {
          "type": "string",
          "example": "Patient not found"
        }
      }
    },
    "getPatient500": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "404"
        },
        "message": {
          "type": "string",
          "example": "Something went wrong"
        }
      }
    },
    "getCards200": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "200"
        },
        "message": {
          "type": "string",
          "example": "Cards found"
        },
        "data": {
          "type": "object",
          "example": {
            "results": [{
              "id": "3a95ffed-8cb1-42bf-abf3-ea3bf195de74",
              "customerName": "Vikram",
              "cardType": "Visa",
              "cardMaskedNumber": "401200******0224",
              "cardExpirationDate": "09/2022"
            }]
          }
        }
      }
    },
    "addCard200": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "200"
        },
        "message": {
          "type": "string",
          "example": "Card added successfully"
        }
      }
    },
    "removeCard200": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "200"
        },
        "message": {
          "type": "string",
          "example": "Card removed successfully"
        }
      }
    },
    "removeCard401": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "401"
        },
        "message": {
          "type": "string",
          "example": "Card already deleted or not exist"
        }
      }
    },
    "providerHome200": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "200"
        },
        "message": {
          "type": "string",
          "example": "Data found"
        },
        "data": {
          "type": "object",
          "example": {
            "totalRecords": 2,
            "recordPerPage": 10,
            "currentPage": 1,
            "result": [{
                "id": "da5fc047-158b-4933-b4a4-d0ab5d15d6fe",
                "appointmentDate": "2019-09-23",
                "appointmentTime": "10:45:00",
                "firstName": "Patient",
                "lastName": "Demo",
                "gender": 1,
                "dateOfBirth": "2019-07-29",
                "countryCode": "",
                "telephone": null,
                "email": "kalpnath@mobikasa.com",
                "isChatEnabled": 0,
                "isVideoEnabled": 0,
                "profileImage": "http://localhost/assets/uploads/1565083283415/1567089045105.jpg",
                "profileThumbImage": "http://localhost/assets/uploads/thumb_1565083283415/1567089045105.jpg"
              },
              {
                "id": "f44bce21-0990-47db-a45c-c736c5d33c47",
                "appointmentDate": "2019-09-08",
                "appointmentTime": "16:00:00",
                "firstName": "Patient",
                "lastName": "Demo",
                "gender": 1,
                "dateOfBirth": "2019-07-29",
                "countryCode": "",
                "telephone": null,
                "email": "kalpnath@mobikasa.com",
                "isChatEnabled": 0,
                "isVideoEnabled": 0,
                "profileImage": "http://localhost/assets/uploads/1565083283415/1567089045105.jpg",
                "profileThumbImage": "http://localhost/assets/uploads/thumb_1565083283415/1567089045105.jpg"
              }
            ]
          }
        }
      }
    },
    "providerHome401": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "401"
        },
        "message": {
          "type": "string",
          "example": "Data not found"
        }
      }
    },
    "getQuestionnaire200": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "200"
        },
        "message": {
          "type": "string",
          "example": "Questions Successfully Fetched"
        },
        "data": {
          "type": "object",
          "example": {
            "questions": [{
                "id": "789f95e1-c6b0-46b9-ab42-ef0c9af7d3df",
                "question": "What is the reason for your visit?",
                "maxCharacter": 20,
                "inputType": 0,
                "sortOrder": 0,
                "createdAt": "2019-09-14",
                "updatedAt": "2019-09-16"
              },
              {
                "id": "e06e0963-8875-4f9c-abf0-8ce6294e614b",
                "question": "How long you've been facing this issue?",
                "maxCharacter": 20,
                "inputType": 0,
                "sortOrder": 0,
                "createdAt": "2019-09-15",
                "updatedAt": "2019-09-16"
              }
            ],
            "totalRecords": 2,
            "recordPerPage": 10,
            "currentPage": 1
          }
        }
      }
    },
    "getQuestionnaire500": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "500"
        },
        "message": {
          "type": "string",
          "example": "Internal Server Error"
        }

      }
    },
    "saveQuestionnaire200": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "200"
        },
        "message": {
          "type": "string",
          "example": "Questionnaire successfully created"
        }
      }
    },
    "saveQuestionnaire401": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "401"
        },
        "message": {
          "type": "string",
          "example": "Questionnaire not exists for particular id"
        }
      }
    },
    "saveQuestionnaire500": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "500"
        },
        "message": {
          "type": "string",
          "example": "Internal Server Error"
        }
      }
    },
    "deleteQuestionnaire200": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "200"
        },
        "message": {
          "type": "string",
          "example": "Questionnaire Deleted"
        }
      }
    },
    "deleteQuestionnaire401": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "401"
        },
        "message": {
          "type": "string",
          "example": "Questionnaire not exists for particular id"
        }
      }
    },
    "deleteQuestionnaire500": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "500"
        },
        "message": {
          "type": "string",
          "example": "Internal Server Error"
        }
      }
    },
    "getProvidersList200": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "200"
        },
        "message": {
          "type": "string",
          "example": "Providers Successfully Fetched"
        },
        "data": {
          "type": "object",
          "example": {
            "totalRecords": 2,
            "recordPerPage": 10,
            "currentPage": 1,
            "providersCurrentlyAvailable": 0,
            "result": [{
                "firstName": "Hg",
                "lastName": "AG",
                "gender": 1,
                "dateOfBirth": "1982-10-29",
                "countryCode": "+1",
                "telephone": "1245444454",
                "specilization": "asd",
                "bio": "asd",
                "languageSpeaks": "English, German, French",
                "isAvailable": 0,
                "id": 10,
                "availibility": "",
                "profileImage": "http://localhost/public/common/provider.png",
                "profileThumbImage": "http://localhost/public/common/thumb_provider.png",
                "isFavorite": 0,
                "createdTimeSpan": null
              },
              {
                "firstName": "Provider",
                "lastName": "Singh",
                "gender": 1,
                "dateOfBirth": "1982-10-29",
                "countryCode": "+1",
                "telephone": "1245444454",
                "specilization": "test1",
                "bio": "test",
                "languageSpeaks": "English, German, French",
                "isAvailable": 0,
                "id": 9,
                "availibility": "",
                "profileImage": "http://localhost/public/common/provider.png",
                "profileThumbImage": "http://localhost/public/common/thumb_provider.png",
                "isFavorite": 0,
                "createdTimeSpan": null
              }
            ]
          }
        }
      }
    },
    "getProvidersList500": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "500"
        },
        "message": {
          "type": "string",
          "example": "Internal Server Error"
        }
      }
    },
    "checkDoctorAvailibility200success": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "200"
        },
        "message": {
          "type": "string",
          "example": "Doctor is available."
        },
        "data": {
          "type": "object",
          "example": {
            "isAvailable": 0,
            "type": 1,
            "providerId": 14,
            "availableDates": [{
              "id": "a69e2cfd-c4d0-4cfa-80e7-8ff79180354a",
              "date": "2019-10-02"
            }]
          }
        }
      }
    },
    "checkDoctorAvailibility200failure": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "200"
        },
        "message": {
          "type": "string",
          "example": "Doctor is unavailable."
        }
      }
    },
    "checkDoctorAvailibility500": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "500"
        },
        "message": {
          "type": "string",
          "example": "Something went wrong"
        }
      }
    },
    "saveProviderSchedule200": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "200"
        },
        "message": {
          "type": "string",
          "example": "Successfully Saved."
        },
        "data": {
          "type": "object",
          "example": [{
            "scheduleForMonth": [{
                "id": "33fa474c-067a-4d70-9512-c5547eeaf780",
                "date": "2019-09-10",
                "scheduledIntervals": [{
                  "fromTime": "2019-09-10T00:15:00.000Z",
                  "toTime": "2019-09-10T23:45:00.000Z"
                }]
              },
              {
                "id": "bbb0f19c-06e9-4b48-b591-57b4ad827abb",
                "date": "2019-09-11",
                "scheduledIntervals": [{
                    "fromTime": "2019-09-10T00:15:00.000Z",
                    "toTime": "2019-09-10T12:15:00.000Z"
                  },
                  {
                    "fromTime": "2019-09-10T15:15:00.000Z",
                    "toTime": "2019-09-10T23:45:00.000Z"
                  }
                ]
              }
            ],
            "useForMonth": 0
          }]
        }
      }
    },
    "saveProviderSchedule500": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "500"
        },
        "message": {
          "type": "string",
          "example": "Internal Server error- Cannot save schedule"
        }
      }
    },
    "getProviderScheduleForMonth200": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "200"
        },
        "message": {
          "type": "string",
          "example": "Filled Slots Fetched Successfully"
        },
        "data": {
          "type": "object",
          "example": [{
              "id": "82ff9d1d-86ca-4f0c-a6f2-41f0a5dbc679",
              "date": "2019-08-26",
              "scheduledIntervals": [{
                  "from12": "10:45 AM",
                  "to12": "14:00 PM",
                  "from24": "10:45",
                  "to24": "14:00"
                },
                {
                  "from12": "10:45 AM",
                  "to12": "14:00 PM",
                  "from24": "14:30",
                  "to24": "16:30"
                },
                {
                  "from12": "10:45 AM",
                  "to12": "14:00 PM",
                  "from24": "10:45",
                  "to24": "14:00"
                }
              ]
            },
            {
              "id": "1fc58c7b-bf9a-4f74-b430-d437c782fa9f",
              "date": "2019-08-27",
              "scheduledIntervals": [{
                  "from12": "10:45 AM",
                  "to12": "14:00 PM",
                  "from24": "10:45",
                  "to24": "14:00"
                },
                {
                  "from12": "10:45 AM",
                  "to12": "14:00 PM",
                  "from24": "14:30",
                  "to24": "16:30"
                }
              ]
            },
            {
              "id": "0df0712c-f7d4-4913-83ce-b9552ff561ca",
              "date": "2019-08-28",
              "scheduledIntervals": [{
                  "from12": "10:45 AM",
                  "to12": "14:00 PM",
                  "from24": "10:45",
                  "to24": "14:00"
                },
                {
                  "from12": "10:45 AM",
                  "to12": "14:00 PM",
                  "from24": "14:30",
                  "to24": "16:30"
                },
                {
                  "from12": "10:45 AM",
                  "to12": "14:00 PM",
                  "from24": "10:45",
                  "to24": "14:00"
                }
              ]
            },
            {
              "id": "9411e143-fce2-4c80-8d27-d3b6b34e78d2",
              "date": "2019-08-29",
              "scheduledIntervals": [{
                  "from12": "10:45 AM",
                  "to12": "14:00 PM",
                  "from24": "10:45",
                  "to24": "14:00"
                },
                {
                  "from12": "10:45 AM",
                  "to12": "14:00 PM",
                  "from24": "14:30",
                  "to24": "16:30"
                },
                {
                  "from12": "10:45 AM",
                  "to12": "14:00 PM",
                  "from24": "10:45",
                  "to24": "14:00"
                }
              ]
            }
          ]
        }
      }
    },
    "getProviderScheduleForMonth500": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "500"
        },
        "message": {
          "type": "string",
          "example": "Internal Server error- Cannot fetch schedule"
        }
      }
    },
    "getProviderTimeSlotsForDate200": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "200"
        },
        "message": {
          "type": "string",
          "example": "Slots Fetched Successfully"
        },
        "data": {
          "type": "object",
          "example": [{
              "id": "ce72b03d-3c75-4b9c-b3cb-6e4c9cb7ae70",
              "timeSpan": 1568074500000,
              "isAvailable": 0
            },
            {
              "id": "05efa339-2db2-432f-ab8f-e22a77b8c9e1",
              "timeSpan": 1568075400000,
              "isAvailable": 0
            },
            {
              "id": "56cf0c86-5094-4409-a2f8-6073f5b57886",
              "timeSpan": 1568076300000,
              "isAvailable": 0
            },
            {
              "id": "01d79e52-bbc6-4281-b2f3-76f370797795",
              "timeSpan": 1568077200000,
              "isAvailable": 0
            },
            {
              "id": "aec68cfe-2de2-4c99-94bb-a37a10e0e481",
              "timeSpan": 1568078100000,
              "isAvailable": 0
            },
            {
              "id": "ec7a960e-ffce-4acc-bc73-53accb3dc5cf",
              "timeSpan": 1568079000000,
              "isAvailable": 0
            },
            {
              "id": "e752cf99-1a8a-48b0-a8c5-de1dfe1f2b36",
              "timeSpan": 1568079900000,
              "isAvailable": 0
            },
            {
              "id": "6ea9a005-73db-4d9f-8666-395ad2c96a43",
              "timeSpan": 1568080800000,
              "isAvailable": 0
            },
            {
              "id": "9b6d6c2e-c590-474f-82fb-f14549376a98",
              "timeSpan": 1568081700000,
              "isAvailable": 0
            },
            {
              "id": "459189a8-470a-4084-85c9-d11fbaae3c71",
              "timeSpan": 1568082600000,
              "isAvailable": 0
            },
            {
              "id": "aa70d366-22ae-496a-8177-f0b07d24cf94",
              "timeSpan": 1568083500000,
              "isAvailable": 0
            },
            {
              "id": "570f8feb-1853-4032-9cf7-8be4c4b24766",
              "timeSpan": 1568084400000,
              "isAvailable": 0
            },
            {
              "id": "39e1e834-6e68-4bab-91d8-6159ab337c3e",
              "timeSpan": 1568085300000,
              "isAvailable": 0
            },
            {
              "id": "01a7c9b1-5fb9-4aff-ad6a-32f9fd8408cd",
              "timeSpan": 1568086200000,
              "isAvailable": 0
            },
            {
              "id": "58d938c0-cb3f-4f0a-9b63-4f26b7e20f40",
              "timeSpan": 1568087100000,
              "isAvailable": 0
            },
            {
              "id": "93c35205-c670-4ed7-8c6d-b8c9ab48653a",
              "timeSpan": 1568088000000,
              "isAvailable": 0
            },
            {
              "id": "aaf2cebe-2433-402c-8e99-861502bb3b37",
              "timeSpan": 1568088900000,
              "isAvailable": 0
            },
            {
              "id": "8d9ecb2b-6248-4f6c-ba16-ef59dd5b7f18",
              "timeSpan": 1568089800000,
              "isAvailable": 0
            },
            {
              "id": "df1a21bd-f5a5-4cbb-afb7-f5526dfea13c",
              "timeSpan": 1568090700000,
              "isAvailable": 0
            },
            {
              "id": "10ed2475-5f5d-45a0-b729-3a2d3a2cea62",
              "timeSpan": 1568091600000,
              "isAvailable": 0
            },
            {
              "id": "5aa32b3e-bf41-4c58-be65-c6c5d59e7f3c",
              "timeSpan": 1568092500000,
              "isAvailable": 0
            },
            {
              "id": "161a8cf1-2e7e-448b-ba9a-0a7e30aad0a2",
              "timeSpan": 1568093400000,
              "isAvailable": 0
            },
            {
              "id": "ca17c559-75fb-46ea-b4f0-cdb401f27945",
              "timeSpan": 1568094300000,
              "isAvailable": 0
            },
            {
              "id": "529d4635-1ada-4972-a7d9-46f25c648616",
              "timeSpan": 1568095200000,
              "isAvailable": 0
            },
            {
              "id": "b14723bd-67da-45ad-848b-d4f16104bd52",
              "timeSpan": 1568096100000,
              "isAvailable": 1
            },
            {
              "id": "7b0df3f5-2341-41a8-9443-528c3ee088cf",
              "timeSpan": 1568097000000,
              "isAvailable": 1
            },
            {
              "id": "f3ae69eb-b4a7-43f9-93aa-e06037fce66e",
              "timeSpan": 1568097900000,
              "isAvailable": 1
            },
            {
              "id": "79cf8aa4-22b4-42a5-98f3-65f79b2ef640",
              "timeSpan": 1568098800000,
              "isAvailable": 1
            },
            {
              "id": "30a99741-fd5d-4f59-9f00-91876b6e8d36",
              "timeSpan": 1568099700000,
              "isAvailable": 1
            },
            {
              "id": "736d1a9d-cb49-4113-b808-d9c3aaae0b63",
              "timeSpan": 1568100600000,
              "isAvailable": 1
            },
            {
              "id": "5f4cc1a7-546a-49cf-8775-780251a417bc",
              "timeSpan": 1568101500000,
              "isAvailable": 1
            },
            {
              "id": "db242cf1-6cc7-4cf8-bf22-33998a9c12d8",
              "timeSpan": 1568102400000,
              "isAvailable": 1
            },
            {
              "id": "1e491dcd-b118-4faa-a3e4-924aee564079",
              "timeSpan": 1568103300000,
              "isAvailable": 1
            },
            {
              "id": "2b0eb837-42ad-4239-8450-8efe022e35cd",
              "timeSpan": 1568104200000,
              "isAvailable": 1
            },
            {
              "id": "f37773cd-84a3-4c33-9e37-8f8fe596f75f",
              "timeSpan": 1568105100000,
              "isAvailable": 1
            },
            {
              "id": "3fe932df-cad6-4b5c-900c-dfb6a32d368a",
              "timeSpan": 1568106000000,
              "isAvailable": 1
            },
            {
              "id": "b3c905b3-fdac-4e8e-aa66-afda3e063c5e",
              "timeSpan": 1568106900000,
              "isAvailable": 1
            },
            {
              "id": "3027fa61-e5ed-431f-ae16-48902c91fe19",
              "timeSpan": 1568107800000,
              "isAvailable": 1
            },
            {
              "id": "7e9a7134-f33d-4d52-8576-f2640a7c30fa",
              "timeSpan": 1568108700000,
              "isAvailable": 1
            },
            {
              "id": "856ac02a-5709-47ef-aba1-380772a18560",
              "timeSpan": 1568109600000,
              "isAvailable": 1
            },
            {
              "id": "14a1cea4-09c9-4546-b72a-0c702882418d",
              "timeSpan": 1568110500000,
              "isAvailable": 1
            },
            {
              "id": "c58e2ba3-fc5d-4638-ad25-2e32c9db32e0",
              "timeSpan": 1568111400000,
              "isAvailable": 1
            },
            {
              "id": "d95810bd-afae-407e-8c22-40ab95d55541",
              "timeSpan": 1568112300000,
              "isAvailable": 1
            },
            {
              "id": "923110dd-0d7e-4c16-a408-3f221e5d732f",
              "timeSpan": 1568113200000,
              "isAvailable": 1
            },
            {
              "id": "c31a841f-1f2d-4b95-b2df-e7c517a297a0",
              "timeSpan": 1568114100000,
              "isAvailable": 1
            },
            {
              "id": "1e67ee98-99dc-48bd-9df5-68fd6f33b6df",
              "timeSpan": 1568115000000,
              "isAvailable": 1
            },
            {
              "id": "c08aa389-a77f-468d-a2a8-40ef125263d6",
              "timeSpan": 1568115900000,
              "isAvailable": 1
            },
            {
              "id": "d4491567-104c-4a15-a04a-5232fcd6cbd9",
              "timeSpan": 1568116800000,
              "isAvailable": 1
            },
            {
              "id": "0bdb484e-d0ec-4db0-acd6-660084c87448",
              "timeSpan": 1568117700000,
              "isAvailable": 1
            },
            {
              "id": "e8378d00-694a-4be9-bba9-b9ec42e05cc4",
              "timeSpan": 1568118600000,
              "isAvailable": 1
            },
            {
              "id": "2c61c91c-6057-4a48-beed-d160103ab938",
              "timeSpan": 1568119500000,
              "isAvailable": 1
            },
            {
              "id": "b4fac6e6-8fd7-4dc3-9cb5-2ef047d26d7d",
              "timeSpan": 1568120400000,
              "isAvailable": 1
            },
            {
              "id": "011584ee-7b57-4a6b-85ef-713ce07f69ce",
              "timeSpan": 1568121300000,
              "isAvailable": 1
            },
            {
              "id": "583bc377-080c-4ca6-9865-6e0a19aaea50",
              "timeSpan": 1568122200000,
              "isAvailable": 1
            },
            {
              "id": "bdfadde0-afe0-427f-b724-4dda34989406",
              "timeSpan": 1568123100000,
              "isAvailable": 1
            },
            {
              "id": "47f5ec8d-82b5-4e2e-a120-e8faa9a4c623",
              "timeSpan": 1568124000000,
              "isAvailable": 1
            },
            {
              "id": "05423b33-2cbb-47fa-b9da-ff4efadd53c1",
              "timeSpan": 1568124900000,
              "isAvailable": 1
            },
            {
              "id": "d70f3b33-f717-4ffd-b70a-b1e72f6ebb1d",
              "timeSpan": 1568125800000,
              "isAvailable": 1
            },
            {
              "id": "930f8cb8-5aad-45ee-ab21-0f867f6955a2",
              "timeSpan": 1568126700000,
              "isAvailable": 1
            },
            {
              "id": "0e2fd320-6cfd-4b86-81cd-0831a5bba2e3",
              "timeSpan": 1568127600000,
              "isAvailable": 1
            },
            {
              "id": "087e2dd4-3df9-4e63-a33c-f59d6342b9d8",
              "timeSpan": 1568128500000,
              "isAvailable": 1
            },
            {
              "id": "5776e39f-b592-4eb1-8715-05c4f0ad3e41",
              "timeSpan": 1568129400000,
              "isAvailable": 1
            },
            {
              "id": "e678ef0b-9088-42c5-8adf-0b0a29f65436",
              "timeSpan": 1568130300000,
              "isAvailable": 1
            },
            {
              "id": "e7d26776-de87-4ddb-ad8e-435393d3c88c",
              "timeSpan": 1568131200000,
              "isAvailable": 1
            },
            {
              "id": "fed43490-b9cd-40c8-a064-5dd52df7089d",
              "timeSpan": 1568132100000,
              "isAvailable": 1
            },
            {
              "id": "3fcd70ed-9c4e-471d-a1d7-69b475637cfe",
              "timeSpan": 1568133000000,
              "isAvailable": 1
            },
            {
              "id": "1d4f57b5-13bb-4950-8668-7769bc5ebdc0",
              "timeSpan": 1568133900000,
              "isAvailable": 1
            },
            {
              "id": "c1adb04e-8df9-42d1-a2f5-6ad6d4099445",
              "timeSpan": 1568134800000,
              "isAvailable": 1
            },
            {
              "id": "ff911b44-4dbe-42d3-8489-92ea38c9baef",
              "timeSpan": 1568135700000,
              "isAvailable": 1
            },
            {
              "id": "50dd2437-1fcc-4f4c-aab0-82cfb7b48d4d",
              "timeSpan": 1568136600000,
              "isAvailable": 1
            },
            {
              "id": "22be3825-257f-4ef0-ae84-2c45f798867f",
              "timeSpan": 1568137500000,
              "isAvailable": 1
            },
            {
              "id": "a11f222e-59f1-49ee-9147-9f914faa8f9b",
              "timeSpan": 1568138400000,
              "isAvailable": 1
            },
            {
              "id": "82591351-799f-4b17-9a41-ff8093b31b58",
              "timeSpan": 1568139300000,
              "isAvailable": 1
            },
            {
              "id": "1552f484-bc7d-4654-8ca4-63d710926589",
              "timeSpan": 1568140200000,
              "isAvailable": 1
            },
            {
              "id": "aa70cb17-60ce-4500-b710-0e90c702c1e0",
              "timeSpan": 1568141100000,
              "isAvailable": 1
            },
            {
              "id": "df2742de-c5c8-47cd-adf3-12b7b0299bb1",
              "timeSpan": 1568142000000,
              "isAvailable": 1
            },
            {
              "id": "ef840361-bcfe-426a-9c68-b9dedc02dbdf",
              "timeSpan": 1568142900000,
              "isAvailable": 1
            },
            {
              "id": "cbbbfbd2-9a08-4e6b-81ee-aeaaa7bfac9b",
              "timeSpan": 1568143800000,
              "isAvailable": 1
            },
            {
              "id": "074b8357-0bf1-437b-8a45-b01420d1fa9f",
              "timeSpan": 1568144700000,
              "isAvailable": 1
            },
            {
              "id": "550f576f-9fd8-4af3-b34f-8239f590a694",
              "timeSpan": 1568145600000,
              "isAvailable": 1
            },
            {
              "id": "beca9f9c-8fcb-4037-ba3d-4d92cdb6392b",
              "timeSpan": 1568146500000,
              "isAvailable": 1
            },
            {
              "id": "0c6587de-522a-4230-a6ba-d429c08df641",
              "timeSpan": 1568147400000,
              "isAvailable": 1
            },
            {
              "id": "54f9a34c-f64c-4eec-8e3c-2f9bcd20c9a7",
              "timeSpan": 1568148300000,
              "isAvailable": 1
            },
            {
              "id": "5cb66d4e-8bc3-4028-8a54-383d77ed468a",
              "timeSpan": 1568149200000,
              "isAvailable": 1
            },
            {
              "id": "38ad5744-509c-4fc5-9055-502f4a7430d8",
              "timeSpan": 1568150100000,
              "isAvailable": 1
            },
            {
              "id": "e2b108ec-8ca7-4527-99b8-733a6faa6775",
              "timeSpan": 1568151000000,
              "isAvailable": 1
            },
            {
              "id": "226aa658-ddef-4c75-ae59-1e1ead1e968b",
              "timeSpan": 1568151900000,
              "isAvailable": 1
            },
            {
              "id": "2e75811c-fa20-4a02-bc0f-53450a67afd1",
              "timeSpan": 1568152800000,
              "isAvailable": 1
            },
            {
              "id": "bd9c9e98-716d-43c4-8935-f573e731060e",
              "timeSpan": 1568153700000,
              "isAvailable": 1
            },
            {
              "id": "fa06cc62-1a9e-4c38-9a32-ac5ee0d325c0",
              "timeSpan": 1568154600000,
              "isAvailable": 1
            },
            {
              "id": "12dd98b2-0f37-42a7-a9b6-206797357b4f",
              "timeSpan": 1568155500000,
              "isAvailable": 1
            },
            {
              "id": "7ee12060-3c5e-44f9-b7b5-1e808e9e927c",
              "timeSpan": 1568156400000,
              "isAvailable": 1
            },
            {
              "id": "786b89ae-8d4c-4995-b737-7639f7738da5",
              "timeSpan": 1568157300000,
              "isAvailable": 1
            },
            {
              "id": "91318b9d-333f-47aa-ade8-2ce2a1f20203",
              "timeSpan": 1568158200000,
              "isAvailable": 1
            }
          ]
        }
      }
    },
    "getProviderTimeSlotsForDate404": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "404"
        },
        "message": {
          "type": "string",
          "example": "No Slots For Particular Date"
        }
      }
    },
    "scheduleAppointment200": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "200"
        },
        "message": {
          "type": "string",
          "example": "Appointment slot saved"
        }
      }
    },
    "scheduleAppointment400": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "400"
        },
        "message": {
          "type": "string",
          "example": "Selected time slot not available"
        }
      }
    },
    "scheduleAppointment404": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "404"
        },
        "message": {
          "type": "string",
          "example": "Selected time slot not exist"
        }
      }
    },
    "getClientToken200": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "200"
        },
        "message": {
          "type": "string",
          "example": "Client token created"
        },
        "data": {
          "type": "object",
          "example": {
            "clientToken": "eyJ2ZXJzaW9uIjoyLCJhdXRob3JpemF0aW9uRmluZ2VycHJpbnQiOiJleUowZVhBaU9pSktWMVFpTENKaGJHY2lPaUpGVXpJMU5pSXNJbXRwWkNJNklqSXdNVGd3TkRJMk1UWXRjMkZ1WkdKdmVDSjkuZXlKbGVIQWlPakUxTmprd05EYzJORGtzSW1wMGFTSTZJalJtWlRreE5XUmxMVFUwTXpZdE5EZzVaUzFpTUdKa0xUVXhPV0ptWlRRMFpXWTFPU0lzSW5OMVlpSTZJbXN6WTNSeE56TjNabkY0WTNaNmFIY2lMQ0pwYzNNaU9pSkJkWFJvZVNJc0ltMWxjbU5vWVc1MElqcDdJbkIxWW14cFkxOXBaQ0k2SW1zelkzUnhOek4zWm5GNFkzWjZhSGNpTENKMlpYSnBabmxmWTJGeVpGOWllVjlrWldaaGRXeDBJanAwY25WbGZTd2ljbWxuYUhSeklqcGJJbTFoYm1GblpWOTJZWFZzZENKZExDSnZjSFJwYjI1eklqcDdJbU4xYzNSdmJXVnlYMmxrSWpvaU5qSTFNek01T0RjMEluMTkubVN3R1AweDJ1cXFZRGJlQzRFdXpDLURJb1V1ZVJqb0QwcHpyR1pCc09XSnNiYjFnZWZkWjVsR0gxUmlRZm1BUG5RUk8xdFFnTFhvWjJWNXFJY0tVOXc/Y3VzdG9tZXJfaWQ9IiwiY29uZmlnVXJsIjoiaHR0cHM6Ly9hcGkuc2FuZGJveC5icmFpbnRyZWVnYXRld2F5LmNvbTo0NDMvbWVyY2hhbnRzL2szY3RxNzN3ZnF4Y3Z6aHcvY2xpZW50X2FwaS92MS9jb25maWd1cmF0aW9uIiwiZ3JhcGhRTCI6eyJ1cmwiOiJodHRwczovL3BheW1lbnRzLnNhbmRib3guYnJhaW50cmVlLWFwaS5jb20vZ3JhcGhxbCIsImRhdGUiOiIyMDE4LTA1LTA4In0sImNoYWxsZW5nZXMiOltdLCJlbnZpcm9ubWVudCI6InNhbmRib3giLCJjbGllbnRBcGlVcmwiOiJodHRwczovL2FwaS5zYW5kYm94LmJyYWludHJlZWdhdGV3YXkuY29tOjQ0My9tZXJjaGFudHMvazNjdHE3M3dmcXhjdnpody9jbGllbnRfYXBpIiwiYXNzZXRzVXJsIjoiaHR0cHM6Ly9hc3NldHMuYnJhaW50cmVlZ2F0ZXdheS5jb20iLCJhdXRoVXJsIjoiaHR0cHM6Ly9hdXRoLnZlbm1vLnNhbmRib3guYnJhaW50cmVlZ2F0ZXdheS5jb20iLCJhbmFseXRpY3MiOnsidXJsIjoiaHR0cHM6Ly9vcmlnaW4tYW5hbHl0aWNzLXNhbmQuc2FuZGJveC5icmFpbnRyZWUtYXBpLmNvbS9rM2N0cTczd2ZxeGN2emh3In0sInRocmVlRFNlY3VyZUVuYWJsZWQiOnRydWUsInBheXBhbEVuYWJsZWQiOnRydWUsInBheXBhbCI6eyJkaXNwbGF5TmFtZSI6Ik1vYmlrYXNhIiwiY2xpZW50SWQiOm51bGwsInByaXZhY3lVcmwiOiJodHRwOi8vZXhhbXBsZS5jb20vcHAiLCJ1c2VyQWdyZWVtZW50VXJsIjoiaHR0cDovL2V4YW1wbGUuY29tL3RvcyIsImJhc2VVcmwiOiJodHRwczovL2Fzc2V0cy5icmFpbnRyZWVnYXRld2F5LmNvbSIsImFzc2V0c1VybCI6Imh0dHBzOi8vY2hlY2tvdXQucGF5cGFsLmNvbSIsImRpcmVjdEJhc2VVcmwiOm51bGwsImFsbG93SHR0cCI6dHJ1ZSwiZW52aXJvbm1lbnROb05ldHdvcmsiOnRydWUsImVudmlyb25tZW50Ijoib2ZmbGluZSIsInVudmV0dGVkTWVyY2hhbnQiOmZhbHNlLCJicmFpbnRyZWVDbGllbnRJZCI6Im1hc3RlcmNsaWVudDMiLCJiaWxsaW5nQWdyZWVtZW50c0VuYWJsZWQiOnRydWUsIm1lcmNoYW50QWNjb3VudElkIjoibW9iaWthc2EiLCJjdXJyZW5jeUlzb0NvZGUiOiJVU0QifSwibWVyY2hhbnRJZCI6ImszY3RxNzN3ZnF4Y3Z6aHciLCJ2ZW5tbyI6Im9mZiJ9"
          }
        }
      }
    },
    "getClientToken404": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "404"
        },
        "message": {
          "type": "string",
          "example": "Client token not generated"
        }
      }
    },
    "saveAppointmentDetails200": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "200"
        },
        "message": {
          "type": "string",
          "example": "Appointment slot saved"
        }
      }
    },
    "saveAppointmentDetails401": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "400"
        },
        "message": {
          "type": "string",
          "example": "Selected time slot not available"
        }
      }
    },
    "addPromo200": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "200"
        },
        "message": {
          "type": "string",
          "example": "PromoCode Added Successfully"
        }
      }
    },
    "addPromo401": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "401"
        },
        "message": {
          "type": "string",
          "example": "PromoCode Already Exists"
        }
      }
    },
    "addPromo500": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "500"
        },
        "message": {
          "type": "string",
          "example": "Internal Server Error"
        }
      }
    },
    "getPromoCodeList200": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "200"
        },
        "message": {
          "type": "string",
          "example": "PromoCode List Fetched Successfully"
        }
      }
    },
    "getPromoCodeList500": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "500"
        },
        "message": {
          "type": "string",
          "example": "Internal Server Error"
        }
      }
    },
    "validatePromoCode200": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "200"
        },
        "message": {
          "type": "string",
          "example": "PromoCode Exists"
        }
      }
    },
    "validatePromoCode401": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "401"
        },
        "message": {
          "type": "string",
          "example": "PromoCode Not Exists"
        }
      }
    },
    "validatePromoCode500": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "500"
        },
        "message": {
          "type": "string",
          "example": "Internal Server Error"
        }
      }
    },
    "updatePromoCode200": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "200"
        },
        "message": {
          "type": "string",
          "example": "PromoCode Successfully Updated"
        }
      }
    },
    "updatePromoCode401": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "401"
        },
        "message": {
          "type": "string",
          "example": "PromoCode Not Exists"
        }
      }
    },
    "updatePromoCode500": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "500"
        },
        "message": {
          "type": "string",
          "example": "Internal Server Error"
        }
      }
    },
    "getPaymentDetails200": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "200"
        },
        "message": {
          "type": "string",
          "example": "Client token not generated"
        },
        "data": {
          "type": "object",
          "example": {
            "isInsuranceCovered": "Not Covered",
            "fee": "$50",
            "appointmentType": 0,
            "timeSpan": 1568096100000,
            "date": "2019-09-10",
            "labFee": "Not Included",
            "discount": "-$25.00",
            "total": "$25.00"
          }
        }
      }
    },
    "getPaymentDetails409": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "409"
        },
        "message": {
          "type": "string",
          "example": "Cannot fetch appointment information for particular user"
        }
      }
    },
    "getPaymentDetails500": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "500"
        },
        "message": {
          "type": "string",
          "example": "Internal Server Error"
        }
      }
    },
    "getAppointmentApprovalStatus200": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "200"
        },
        "message": {
          "type": "string",
          "example": "Appointment Approved"
        }
      }
    },
    "getAppointmentApprovalStatus500": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "500"
        },
        "message": {
          "type": "string",
          "example": "Internal Server Error"
        }
      }
    },
    "saveAppointmentApprovalStatus200": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "200"
        },
        "message": {
          "type": "string",
          "example": "Appointment Approved"
        }
      }
    },
    "saveAppointmentApprovalStatus403": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "403"
        },
        "message": {
          "type": "string",
          "example": "Un-authorized access"
        }
      }
    },
    "saveAppointmentApprovalStatus500": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "500"
        },
        "message": {
          "type": "string",
          "example": "Internal Server Error"
        }
      }
    },
    "registerAdmin200": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "200"
        },
        "message": {
          "type": "string",
          "example": "Admin successfully created"
        }
      }
    },
    "registerAdmin400": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "400"
        },
        "message": {
          "type": "string",
          "example": "Admin cannot be added/Unauthorized access"
        }
      }
    },
    "registerAdmin409": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "409"
        },
        "message": {
          "type": "string",
          "example": "Admin already exists"
        }
      }
    },
    "registerAdmin500": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "500"
        },
        "message": {
          "type": "string",
          "example": "Internal Server Error"
        }
      }
    },
    "updateAdmin200": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "200"
        },
        "message": {
          "type": "string",
          "example": "Admin successfully created"
        }
      }
    },
    "updateAdmin400": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "400"
        },
        "message": {
          "type": "string",
          "example": "Admin cannot be updated/Unauthorized Access"
        }
      }
    },
    "updateAdmin500": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "500"
        },
        "message": {
          "type": "string",
          "example": "Internal Server Error"
        }
      }
    },
    "deleteAdmin200": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "200"
        },
        "message": {
          "type": "string",
          "example": "Admin successfully deleted"
        }
      }
    },
    "deleteAdmin400": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "400"
        },
        "message": {
          "type": "string",
          "example": "Admin cannot be deleted/Unauthorized Access"
        }
      }
    },
    "deleteAdmin500": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "500"
        },
        "message": {
          "type": "string",
          "example": "Internal Server Error"
        }
      }
    },
    "getAdmin200": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "200"
        },
        "message": {
          "type": "string",
          "example": "Admin successfully deleted"
        }
      }
    },
    "getAdmin400": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "400"
        },
        "message": {
          "type": "string",
          "example": "Admin cannot be deleted/Unauthorized Access"
        }
      }
    },
    "getAdmin500": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "500"
        },
        "message": {
          "type": "string",
          "example": "Internal Server Error"
        }
      }
    },
    "updateAdminStatus200": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "200"
        },
        "message": {
          "type": "string",
          "example": "Admin status successfully updated"
        }
      }
    },
    "updateAdminStatus400": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "400"
        },
        "message": {
          "type": "string",
          "example": "Admin cannot be updated/Unauthorized Access"
        }
      }
    },
    "updateAdminStatus500": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "500"
        },
        "message": {
          "type": "string",
          "example": "Internal Server Error"
        }
      }
    },
    "cancelConsultNow200": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "200"
        },
        "message": {
          "type": "string",
          "example": "Consult Successfully Cancelled"
        }
      }
    },
    "cancelConsultNow500": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "500"
        },
        "message": {
          "type": "string",
          "example": "Internal Server Error"
        }
      }
    },
    "changeProviderStatus200": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "200"
        },
        "message": {
          "type": "string",
          "example": "Provider Status changed successfully"
        }
      }
    },
    "changeProviderStatus401": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "401"
        },
        "message": {
          "type": "string",
          "example": "User not found"
        }
      }
    },
    "changeProviderStatus500": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "500"
        },
        "message": {
          "type": "string",
          "example": "Internal Server Error"
        }
      }
    },
    "changePatientStatus200": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "200"
        },
        "message": {
          "type": "string",
          "example": "Patient Status changed successfully"
        }
      }
    },
    "changePatientStatus401": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "401"
        },
        "message": {
          "type": "string",
          "example": "User not found"
        }
      }
    },
    "changePatientStatus500": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "500"
        },
        "message": {
          "type": "string",
          "example": "Internal Server Error"
        }
      }
    },
    "updateInsuranceStatus200": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "200"
        },
        "message": {
          "type": "string",
          "example": "Insurance Fetched Successfully"
        }
      }
    },
    "updateInsuranceStatus500": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "500"
        },
        "message": {
          "type": "string",
          "example": "Internal Server Error"
        }
      }
    },
    "updateInsuranceStatus401": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "401"
        },
        "message": {
          "type": "string",
          "example": "Insurance cannot be updated"
        }
      }
    },
    "insuranceList200": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "200"
        },
        "message": {
          "type": "string",
          "example": "Insurance Fetched Successfully"
        }
      }
    },
    "insuranceList500": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "500"
        },
        "message": {
          "type": "string",
          "example": "Internal Server Error"
        }
      }
    },
    "getInsuranceDetail200": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "200"
        },
        "message": {
          "type": "string",
          "example": "Details fetched successfully"
        }
      }
    },
    "getInsuranceDetail500": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "200"
        },
        "message": {
          "type": "string",
          "example": "Internal Server Error"
        }
      }
    },
    "getInsuranceDetail401": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "401"
        },
        "message": {
          "type": "string",
          "example": "No such user found"
        }
      }
    },
    "updateMedicalChart200": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "200"
        },
        "message": {
          "type": "string",
          "example": "Medical Chart successfully updated"
        }
      }
    },
    "updateMedicalChart404": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "404"
        },
        "message": {
          "type": "string",
          "example": "Appointment not found"
        }
      }
    },
    "updateMedicalChart500": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "500"
        },
        "message": {
          "type": "string",
          "example": "Something went wrong"
        }
      }
    },
    "getMedicalChart200": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "200"
        },
        "message": {
          "type": "string",
          "example": "Medical Chart Fetched Successfully"
        },
        "data": {
          "type": "object",
          "example": {
            "medicalData": {
              "chiefComplain": "fever",
              "histroyOfPresentIllness": "",
              "prescriptions": "",
              "pharmacy": "",
              "labOrdered": "",
              "medicalHistory": "",
              "reviewOfSymptoms": "",
              "examsVisual": "",
              "dischargeInstruction": "",
              "allergies": "",
              "cptCode": "",
              "icd10Code": "",
              "teleHealthCode": "",
              "notes": "",
              "labResult": null,
              "ent": "",
              "respiratory": "",
              "constitutional": "",
              "eyes": "",
              "cardiovascular": "",
              "gastrointestinal": "",
              "genitourinary": "",
              "dermatology": "",
              "msk": "",
              "neurology": "",
              "endocrine": "",
              "hematologic": "",
              "psychiatric": ""
            }
          }
        }
      }
    },
    "getMedicalChart500": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "500"
        },
        "message": {
          "type": "string",
          "example": "Something went wrong"
        }
      }
    },
    "updatePrescription200": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "200"
        },
        "message": {
          "type": "string",
          "example": "Prescription Updated Successfully"
        }
      }
    },
    "updatePrescription500": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "500"
        },
        "message": {
          "type": "string",
          "example": "Something went wrong"
        }
      }
    },
    "makePayment200": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "200"
        },
        "message": {
          "type": "string",
          "example": "Confirmation email and SMS has been sent to your registered details"
        },
        "data": {
          "type": "object",
          "example": {
            "type": 1,
            "date": "2019-09-25",
            "timeSpan": 1568096100000
          }
        }
      }
    },
    "makePayment400": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "400"
        },
        "message": {
          "type": "string",
          "example": "Unable to book appointment"
        }
      }
    },
    "makePayment500": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "500"
        },
        "message": {
          "type": "string",
          "example": "Something went wrong"
        }
      }
    },
    "getAppointmentsList200": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "200"
        },
        "message": {
          "type": "string",
          "example": "Appointments fetched successfully"
        },
        "data": {
          "type": "object",
          "example": {
            "sortTitle": {
              "provider_full_name": "Provider Name",
              "patient_full_name": "Patinet Name",
              "isPaid": "Payment Status",
              "isActive": "Appointment Status"
            },
            "sortOrder": {
              "asc": "Ascending",
              "desc": "Descending"
            },
            "totalRecords": 3,
            "recordPerPage": 10,
            "currentPage": 1,
            "result": [{
                "id": "f44bce21-0990-47db-a45c-c736c5d33c47",
                "referenceId": null,
                "patientId": 18,
                "providerId": 5,
                "isActive": 1,
                "isCompleted": 1,
                "isInsuranceCovered": "Not Covered",
                "discountCode": "",
                "discountValue": "0.00",
                "subTotal": "45.00",
                "labFee": "0.00",
                "discount": "0.00",
                "tax": "0.00",
                "total": "45.00",
                "oldTotal": 45,
                "reAuthDate": "2019-09-09",
                "paymentMode": "creditCard",
                "transactionId": "dak9sr83",
                "cardDetailsId": "aaa0f8e7-3110-4911-91e3-7cf46c287fde",
                "token": "8mrw59",
                "nameOnCard": "Vikram Singh",
                "cardType": "American Express",
                "cardMaskedNumber": "371449******8431",
                "refundId": "",
                "refundAmount": "0.00",
                "isChatEnabled": 0,
                "isVideoEnabled": 0,
                "callEndAt": null,
                "chatEnabledDate": null,
                "appointmentTime": "16:00:00",
                "appointmentType": 1,
                "dialogueId": null,
                "createdAt": "2019-08-30",
                "updatedAt": "2019-09-12",
                "isPaid": "auth",
                "appointmentDate": "2019-09-08",
                "reScheduledBy": 18,
                "timeStamp": null,
                "patient_full_name": "Patient Demo",
                "provider_full_name": "Provider Singh",
                "bookingStatus": "Booked",
                "appointmentStatus": "Completed"
              },
              {
                "id": "da5fc047-158b-4933-b4a4-d0ab5d15d6fe",
                "referenceId": null,
                "patientId": 18,
                "providerId": 5,
                "isActive": 1,
                "isCompleted": 1,
                "isInsuranceCovered": "Not Covered",
                "discountCode": "GIVE50",
                "discountValue": "50.00",
                "subTotal": "100.00",
                "labFee": "10.00",
                "discount": "20.00",
                "tax": "0.00",
                "total": "55.00",
                "oldTotal": 20,
                "reAuthDate": null,
                "paymentMode": "creditCard",
                "transactionId": "dygws5vx",
                "cardDetailsId": "aaa0f8e7-3110-4911-91e3-7cf46c287fde",
                "token": "8mrw59",
                "nameOnCard": "Vikram Singh",
                "cardType": "American Express",
                "cardMaskedNumber": "371449******8431",
                "refundId": "",
                "refundAmount": "0.00",
                "isChatEnabled": 0,
                "isVideoEnabled": 0,
                "callEndAt": null,
                "chatEnabledDate": null,
                "appointmentTime": "10:45:00",
                "appointmentType": 1,
                "dialogueId": null,
                "createdAt": "2019-09-06",
                "updatedAt": "2019-09-09",
                "isPaid": "paid",
                "appointmentDate": "2019-09-23",
                "reScheduledBy": null,
                "timeStamp": null,
                "patient_full_name": "Patient Demo",
                "provider_full_name": "Provider Singh",
                "bookingStatus": "Booked",
                "appointmentStatus": "Completed"
              }
            ]
          }
        }
      }
    },
    "getAppointmentsList500": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "500"
        },
        "message": {
          "type": "string",
          "example": "Something went wrong"
        }
      }
    },
    "adminNotificationList200": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "200"
        },
        "message": {
          "type": "string",
          "example": "Notification Fetched Successfully"
        },
        "data": {
          "type": "object",
          "example": {
            "result": [{
                "id": 8,
                "sentTo": "patients",
                "toId": 174,
                "notificationType": "push",
                "message": null,
                "title": null,
                "createdAt": "2019-09-09",
                "updatedAt": "2019-09-09",
                "firstName": "Kuldeep"
              },
              {
                "id": 9,
                "sentTo": "patients",
                "toId": 174,
                "notificationType": "push",
                "message": null,
                "title": null,
                "createdAt": "2019-09-09",
                "updatedAt": "2019-09-09",
                "firstName": "Kuldeep"
              },
              {
                "id": 33,
                "sentTo": "patients",
                "toId": 174,
                "notificationType": "push",
                "message": null,
                "title": null,
                "createdAt": "2019-09-09",
                "updatedAt": "2019-09-09",
                "firstName": "Kuldeep"
              },
              {
                "id": 34,
                "sentTo": "patients",
                "toId": 174,
                "notificationType": "push",
                "message": null,
                "title": null,
                "createdAt": "2019-09-09",
                "updatedAt": "2019-09-09",
                "firstName": "Kuldeep"
              },
              {
                "id": 35,
                "sentTo": "patients",
                "toId": 174,
                "notificationType": "push",
                "message": null,
                "title": null,
                "createdAt": "2019-09-09",
                "updatedAt": "2019-09-09",
                "firstName": "Kuldeep"
              },
              {
                "id": 59,
                "sentTo": "patients",
                "toId": 174,
                "notificationType": "push",
                "message": null,
                "title": null,
                "createdAt": "2019-09-10",
                "updatedAt": "2019-09-10",
                "firstName": "Kuldeep"
              },
              {
                "id": 60,
                "sentTo": "patients",
                "toId": 174,
                "notificationType": "push",
                "message": null,
                "title": null,
                "createdAt": "2019-09-10",
                "updatedAt": "2019-09-10",
                "firstName": "Kuldeep"
              },
              {
                "id": 72,
                "sentTo": "patients",
                "toId": 174,
                "notificationType": "push",
                "message": null,
                "title": null,
                "createdAt": "2019-09-10",
                "updatedAt": "2019-09-10",
                "firstName": "Kuldeep"
              },
              {
                "id": 73,
                "sentTo": "patients",
                "toId": 174,
                "notificationType": "push",
                "message": null,
                "title": null,
                "createdAt": "2019-09-10",
                "updatedAt": "2019-09-10",
                "firstName": "Kuldeep"
              },
              {
                "id": 85,
                "sentTo": "patients",
                "toId": 174,
                "notificationType": "push",
                "message": null,
                "title": null,
                "createdAt": "2019-09-10",
                "updatedAt": "2019-09-10",
                "firstName": "Kuldeep"
              }
            ]
          }
        }
      }
    },
    "adminNotificationList500": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "500"
        },
        "message": {
          "type": "string",
          "example": "Something went wrong"
        }
      }
    },
    "reviewsList200": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "200"
        },
        "message": {
          "type": "string",
          "example": "Reviews Fetched Successfully"
        },
        "data": {
          "type": "object",
          "example": {
            "sortTitle": {
              "firstName": "First Name",
              "lastName": "Last Name",
              "comments": "Reviews",
              "rating": "Rating",
              "createdAt": "Commented On"
            },
            "sortOrder": {
              "asc": "Ascending",
              "desc": "Descending"
            },
            "totalRecords": 2,
            "recordPerPage": 10,
            "currentPage": 1,
            "result": [{
                "rating": 3,
                "comments": "dsds",
                "fullName": "Preeti Sharma",
                "appointmentId": "8271b045-d0fc-45f4-8086-c7834035d12a",
                "createdAt": "2019-09-01",
                "updatedAt": "2019-09-05"
              },
              {
                "rating": 1,
                "comments": "hhi",
                "fullName": "utkarsh singh",
                "appointmentId": "8271b045-d0fc-45f4-8086-c7834035d12a",
                "createdAt": "2019-09-05",
                "updatedAt": "2019-09-05"
              }
            ]
          }
        }
      }
    },
    "reviewsList401": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "401"
        },
        "message": {
          "type": "string",
          "example": "Data not found"
        }
      }
    },
    "reviewsList500": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "500"
        },
        "message": {
          "type": "string",
          "example": "Something went wrong"
        }
      }
    },
    "getAppointment200": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "200"
        },
        "message": {
          "type": "string",
          "example": "Appointment fetched successfully"
        },
        "data": {
          "type": "object",
          "example": {
            "id": "f44bce21-0990-47db-a45c-c736c5d33c47",
            "referenceId": null,
            "patientId": 18,
            "providerId": 5,
            "isActive": 1,
            "isCompleted": 1,
            "isInsuranceCovered": "Not Covered",
            "discountCode": "",
            "discountValue": "0.00",
            "subTotal": "45.00",
            "labFee": "0.00",
            "discount": "0.00",
            "tax": "0.00",
            "total": "45.00",
            "oldTotal": 45,
            "reAuthDate": "2019-09-09",
            "paymentMode": "creditCard",
            "transactionId": "dak9sr83",
            "cardDetailsId": "aaa0f8e7-3110-4911-91e3-7cf46c287fde",
            "token": "8mrw59",
            "nameOnCard": "Vikram Singh",
            "cardType": "American Express",
            "cardMaskedNumber": "371449******8431",
            "refundId": "",
            "refundAmount": "0.00",
            "isChatEnabled": 0,
            "isVideoEnabled": 0,
            "callEndAt": null,
            "chatEnabledDate": null,
            "appointmentTime": "16:00:00",
            "appointmentType": 1,
            "dialogueId": null,
            "createdAt": "2019-08-30",
            "updatedAt": "2019-09-12",
            "isPaid": "auth",
            "appointmentDate": "2019-09-08",
            "timeStamp": null,
            "reScheduledBy": 18,
            "patient_full_name": "Patient Demo",
            "provider_full_name": "Provider Singh",
            "bookingStatus": "Booked",
            "appointmentStatus": "Completed"
          }
        }
      }
    },
    "getAppointment500": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "500"
        },
        "message": {
          "type": "string",
          "example": "Something went wrong"
        }
      }
    },
    "getPatientVisitDetails200": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "200"
        },
        "message": {
          "type": "string",
          "example": "Details fetched successfully"
        },
        "data": {
          "type": "object",
          "example": {
            "patientInfo": {
              "name": "Manishs Valiyan",
              "address": "mobikasa 9876553ggs",
              "telephone": "3698521478",
              "dateOfBirth": "1996-08-06"
            },
            "appointmentInfo": {
              "visitDate": "2019-09-18",
              "timeOfVisit": "00:50:00",
              "id": "KNH100015",
              "duration": "15 mins"
            },
            "medicalQuestionnaires": [],
            "uploadedDocuments": []
          }
        }
      }
    },
    "getPatientVisitDetails500": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "500"
        },
        "message": {
          "type": "string",
          "example": "Something went wrong"
        }
      }
    },
    "infopages200": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "200"
        },
        "message": {
          "type": "string",
          "example": "Infopages Fetched Successfully"
        }
      }
    },
    "getinfopages200": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "200"
        },
        "message": {
          "type": "string",
          "example": "Infopages fetched successfully"
        },
        "data": {
          "type": "object",
          "example": {
            "infoPage": {
              "id": 1,
              "title": "terms",
              "content": "test",
              "createdAt": "2019-09-17T12:03:46.000Z",
              "updatedAt": "2019-09-23T05:06:23.000Z"
            }
          }
        }
      }
    },
    "getinfopages500": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "500"
        },
        "message": {
          "type": "string",
          "example": "Something went wrong"
        }
      }
    },
    "saveinfopages500": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "500"
        },
        "message": {
          "type": "string",
          "example": "Something went wrong"
        }
      }
    },
    "infopagesSaved200": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "200"
        },
        "message": {
          "type": "string",
          "example": "InfoPages Saved"
        }
      }
    },
    "getlabResults200": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "200"
        },
        "message": {
          "type": "string",
          "example": "Successful"
        },
        "data": {
          "type": "object",
          "example": {
            "notes": "",
            "labImages": [
              "http://localhost/assets/uploads/1568446570165/1568455689060.jpeg",
              "http://localhost/assets/uploads/1568446570165/1568476471818.jpg",
              "http://localhost/assets/uploads/1568446570165/1568476489212.jpg",
              "http://localhost/assets/uploads/1568446570165/1568476498214.jpg"
            ]
          }
        }
      }
    },
    "getlabResults500": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "500"
        },
        "message": {
          "type": "string",
          "example": "Something Went Wrong"
        }
      }
    },
    "updateLabResults200": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "200"
        },
        "message": {
          "type": "string",
          "example": "Lab Results Updated Successfully"
        }
      }
    },
    "updateLabResults500": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "500"
        },
        "message": {
          "type": "string",
          "example": "Something Went Wrong"
        }
      }
    },
    "adminlogin200": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "200"
        },
        "message": {
          "type": "string",
          "example": "Logged In Successful"
        },
        "data": {
          "type": "object",
          "example": {

            "profile": {
              "id": 37,
              "email": "admin@gmail.com",
              "role": 4,
              "quickBloxId": null,
              "createdTimeSpan": "1568692892341",
              "gender": 1,
              "firstName": "Dr Rich",
              "lastName": "George",
              "dateOfBirth": "2019-08-10",
              "countryCode": "+1",
              "telephone": "9968211389",
              "specilization": "Cardiologist",
              "languageSpeaks": "English",
              "bio": "DOctor",
              "createdBy": 3,
              "isAvailable": 0,
              "doctorFee": 400,
              "city": 2,
              "state": 1,
              "zipCode": "201001",
              "address": "DElhi",
              "country": 1,
              "profileImage": "http://localhost/assets/uploads/1568692892341/1568692872058.jpg",
              "profileThumbImage": "http://localhost/assets/uploads/1568692892341/thumb_1568692872058.jpg"
            }

          }
        }
      }
    },
    "adminlogin401": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "500"
        },
        "message": {
          "type": "string",
          "example": "Something Went Wrong"
        }
      }
    },
    "getUserDetail200": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "200"
        },
        "message": {
          "type": "string",
          "example": "User found"
        }
      }
    },
    "getUserDetail404": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "404"
        },
        "message": {
          "type": "string",
          "example": "User not found"
        }
      }
    },
    "getUserDetail500": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "500"
        },
        "message": {
          "type": "string",
          "example": "Something Went Wrong"
        }
      }
    },
    "getUsersByPromoCode200": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "200"
        },
        "message": {
          "type": "string",
          "example": "PromoCode fetched successfully"
        },
        "data": {
          "type": "object",
          "example": [{
              "id": 36,
              "name": "Ashutosh Mishra"
            },
            {
              "id": 7,
              "name": "Vikram Singh"
            }
          ]
        }
      }
    },
    "getUsersByPromoCode500": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "500"
        },
        "message": {
          "type": "string",
          "example": "Something Went Wrong"
        }
      }
    },
    "updateProviderInfo200": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "200"
        },
        "message": {
          "type": "string",
          "example": "Saved SUccessfully"
        },
        "data": {
          "type": "object",
          "example": {
            "profile": {
              "email": "provider1@mobikasa.com",
              "role": 4,
              "quickBloxId": null,
              "createdTimeSpan": "1568450119055",
              "gender": 1,
              "firstName": "demo",
              "lastName": "demo",
              "dateOfBirth": "1982-10-29",
              "countryCode": "+1",
              "telephone": "8882730419",
              "specilization": "test",
              "languageSpeaks": "English, German, French",
              "bio": "test",
              "availibility": "",
              "createdBy": 6,
              "isAvailable": 0,
              "doctorFee": 50,
              "city": 1,
              "state": 1,
              "zipCode": "11211",
              "address": "New York",
              "country": 1,
              "profileImage": "http://localhost/assets/uploads/1568450119055/1568631045980.png",
              "profileThumbImage": "http://localhost/assets/uploads/1568450119055/thumb_1568631045980.png"
            }
          }
        }

      }
    },
    "updateProviderInfo401": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "401"
        },
        "message": {
          "type": "string",
          "example": "Not Authorised"
        }
      }
    },
    "updateProviderInfo500": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "500"
        },
        "message": {
          "type": "string",
          "example": "Something Went Wrong"
        }
      }
    },
    "getProvider200": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "200"
        },
        "message": {
          "type": "string",
          "example": "Update Success"
        },
        "data": {
          "type": "object",
          "example": {
            "email": "hg@yopmail.com",
            "firstName": "Dr Hawkin",
            "lastName": "Garland",
            "gender": 1,
            "countryCode": "+43",
            "dateOfBirth": "1997-09-06",
            "city": 1,
            "state": 1,
            "zipCode": "11211",
            "telephone": "1245444454",
            "latitude": "",
            "longitude": "",
            "address": "1",
            "country": 1,
            "specilization": "Kidne",
            "bio": "I am a surgeon",
            "languageSpeaks": "English, German, French",
            "isAvailable": 0,
            "id": 4,
            "availibility": "",
            "profileImage": "http://localhost/assets/uploads/1568386205573/1568759114738.jpg",
            "profileThumbImage": "http://localhost/assets/uploads/thumb_1568386205573/1568759114738.jpg",
            "isFavorite": 0,
            "createdTimeSpan": "1568386205573"
          }
        }
      }
    },
    "getProvider409": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "409"
        },
        "message": {
          "type": "string",
          "example": "Not Updated"
        }
      }
    },
    "getProvider500": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "500"
        },
        "message": {
          "type": "string",
          "example": "Something Went Wrong"
        }
      }
    },
    "completeVideoCall200": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "200"
        },
        "message": {
          "type": "string",
          "example": "Video Call Completed successfully"
        }
      }
    },
    "completeVideoCall500": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "500"
        },
        "message": {
          "type": "string",
          "example": "Internal Server Error"
        }
      }
    },
    "updateClinicCode200": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "200"
        },
        "message": {
          "type": "string",
          "example": "Clinic code updated successfully"
        }
      }
    },
    "updateClinicCode500": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "500"
        },
        "message": {
          "type": "string",
          "example": "Internal Server Error - Invalid clinic code"
        }
      }
    },
    "saveChild200": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "200"
        },
        "message": {
          "type": "string",
          "example": "Child data is saved successfully."
        },
        "data": {
          "type": "object",
          "example": { 
            "profile": {
              "firstName": "Ankit",
              "lastName": "Singh",
              "dateOfBirth": "2012-05-24",
              "gender": 1,
              "userId": 212,
              "profileImage": "http://localhost/public/common/patient.png",
              "thumbImage": "http://localhost/public/common/thumb_patient.png"
            }
          }
        }
      }
    },
    "saveChild500": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "500"
        },
        "message": {
          "type": "string",
          "example": "Internal Server Error - Invalid child"
        }
      }
    },    
    "getChildList200": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "200"
        },
        "message": {
          "type": "string",
          "example": "Children List"
        },
        "data": {
          "type": "object",
          "example": {
            "children" : [
                {
                  "childId": 212,
                  "firstName": "Ankit",
                  "lastName": "Singh",
                  "gender": 1,
                  "dateOfBirth": "2012-05-24",
                  "profileImage": "http://localhost/public/common/patient.png",
                  "profileThumbImage": "http://localhost/public/common/patient.png",
                  "createdTimeSpan": null
                },
                {
                  "childId": 211,
                  "firstName": "Ankita",
                  "lastName": "Singh",
                  "gender": 1,
                  "dateOfBirth": "2012-05-24",
                  "profileImage": "https://knownow-assets.s3.us-west-2.amazonaws.com/1577363905509/Screenshot.png",
                  "profileThumbImage": "https://knownow-assets.s3.us-west-2.amazonaws.com/1577363905509/thumb_Screenshot.png",
                  "createdTimeSpan": "1577363905509"
                },
                {
                  "childId": 210,
                  "firstName": "Kalpnath",
                  "lastName": "Paswan",
                  "gender": 1,
                  "dateOfBirth": "2010-05-24",
                  "profileImage": "http://localhost/public/common/patient.png",
                  "profileThumbImage": "http://localhost/public/common/patient.png",
                  "createdTimeSpan": null
                }
            ]
          }
        }
      }
    },
    "getChildList500": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "200"
        },
        "message": {
          "type": "string",
          "example": "Internal Server Error - Child List Not Found"
        }
      }
    },
    "getChildDetails200": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "200"
        },
        "message": {
          "type": "string",
          "example": "Child Details Found"
        },
        "data": {
          "type": "object",
          "example": {
            "profile": {
                "parentId": 133,
                "firstName": "Ankita",
                "lastName": "Singh",
                "dateOfBirth": "2012-05-24",
                "gender": 1,
                "profileImage": "https://knownow-assets.s3.us-west-2.amazonaws.com/1577363905509/Screenshot.png",
                "profileThumbImage": "https://knownow-assets.s3.us-west-2.amazonaws.com/1577363905509/thumb_Screenshot.png",
                "childId": 211
            },
            "insuranceData": {
                "isInsuranceVerified": 0,
                "insuranceNumber": "123456",
                "insuranceEndDate": null,
                "insuranceVerifiedBy": null,
                "insuranceVerifiedOn": null,
                "insuranceCompanyName": "Kotak Foundation Group",
                "policyHolderName": "Ankita Singh",
                "groupId": "123456",
                "memberId": "1234563",
                "insuranceImages": [
                    {
                        "imageType": "insurance_image",
                        "insuranceImageIndex": "0",
                        "insuranceImageUrl": "https://knownow-assets.s3.us-west-2.amazonaws.com/1577363905509/aa68742d-ae1f-4fb7-9d0c-e1756d5204b0-profile_image-300x300.jpg",
                        "insuranceThumbUrl": "https://knownow-assets.s3.us-west-2.amazonaws.com/1577363905509/thumb_aa68742d-ae1f-4fb7-9d0c-e1756d5204b0-profile_image-300x300.jpg"
                    },
                    {
                        "imageType": "insurance_image",
                        "insuranceImageIndex": "1",
                        "insuranceImageUrl": "https://knownow-assets.s3.us-west-2.amazonaws.com/1577363905509/images.jpeg",
                        "insuranceThumbUrl": "https://knownow-assets.s3.us-west-2.amazonaws.com/1577363905509/thumb_images.jpeg"
                    },
                    {
                        "imageType": "insurance_image",
                        "insuranceImageIndex": "2",
                        "insuranceImageUrl": "https://knownow-assets.s3.us-west-2.amazonaws.com/1577363905509/6421cd7be3144b43397ac240c205dc8f.jpg",
                        "insuranceThumbUrl": "https://knownow-assets.s3.us-west-2.amazonaws.com/1577363905509/thumb_6421cd7be3144b43397ac240c205dc8f.jpg"
                    },
                    {
                        "imageType": "insurance_image",
                        "insuranceImageIndex": "3",
                        "insuranceImageUrl": "https://knownow-assets.s3.us-west-2.amazonaws.com/1577363905509/images2.jpeg",
                        "insuranceThumbUrl": "https://knownow-assets.s3.us-west-2.amazonaws.com/1577363905509/thumb_images2.jpeg"
                    }
                ]
            },
            "pharmacy": {
                "pharmacyName": null,
                "pharmacyAddress": null,
                "pharmacyPhone": null
            },
            "labs": {
                "labName": null,
                "labAddress": null,
                "labPhone": null
            },
            "allergiesMedication": {
                "medicalCondition": [
                    "Test",
                    "Test2",
                    "Test3"
                ],
                "allergies": {
                    "medicationAllergies": [
                        "1",
                        "2",
                        "4"
                    ],
                    "otherAllergies": [
                        "a",
                        "b"
                    ]
                },
                "medications": [
                    "Test",
                    "Test2",
                    "Test3"
                ]
            }
          }
        }
      }
    },
    "getChildDetails404": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "500"
        },
        "message": {
          "type": "string",
          "example": "Child Details Not Found"
        }
      }
    },    
    "getChildDetails500": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "500"
        },
        "message": {
          "type": "string",
          "example": "Internal Server Error"
        }
      }
    },
    "getAllergiesAndMedications200": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "true"
        },
        "code": {
          "type": "integer",
          "example": "200"
        },
        "message": {
          "type": "string",
          "example": "Allergies and medication found"
        },
        "data": {
          "type": "object",
          "example": {
            "medicalCondition": [
                "Test",
                "Test2",
                "Test3"
            ],
            "allergies": {
                "medicationAllergies": [
                    "1",
                    "2",
                    "4"
                ],
                "otherAllergies": [
                    "a",
                    "b"
                ]
            },
            "medications": [
                "Test",
                "Test2",
                "Test3"
            ]
          }
        }
      }
    },
    "getAllergiesAndMedications401": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "401"
        },
        "message": {
          "type": "string",
          "example": "No such user found"
        }
      }
    },    
    "getAllergiesAndMedications500": {
      "properties": {
        "status": {
          "type": "boolean",
          "example": "false"
        },
        "code": {
          "type": "integer",
          "example": "500"
        },
        "message": {
          "type": "string",
          "example": "Internal Server Error"
        }
      }
    }
  }
}